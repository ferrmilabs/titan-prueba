<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Titan: element2.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="namespaces.html">Namespace List</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a> | <a class="qindex" href="globals.html">File&nbsp;Members</a></div>
<div class="nav">
<a class="el" href="dir_000000.html">src</a>&nbsp;/&nbsp;<a class="el" href="dir_000001.html">header</a></div>
<h1>element2.h</h1><a href="element2_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment">00001 <span class="comment">/*******************************************************************</span>
00002 <span class="comment"> * Copyright (C) 2003 University at Buffalo</span>
00003 <span class="comment"> *</span>
00004 <span class="comment"> * This software can be redistributed free of charge.  See COPYING</span>
00005 <span class="comment"> * file in the top distribution directory for more details.</span>
00006 <span class="comment"> *</span>
00007 <span class="comment"> * This software is distributed in the hope that it will be useful,</span>
00008 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00009 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
00010 <span class="comment"> *</span>
00011 <span class="comment"> * Author: </span>
00012 <span class="comment"> * Description: </span>
00013 <span class="comment"> *</span>
00014 <span class="comment"> *******************************************************************</span>
00015 <span class="comment"> * $Id: element2.h 152 2007-06-27 20:29:54Z dkumar $ </span>
00016 <span class="comment"> */</span>
00017 
00018 <span class="preprocessor">#ifndef ELEMENT_H</span>
00019 <span class="preprocessor"></span><span class="preprocessor">#define ELEMENT_H</span>
00020 <span class="preprocessor"></span><span class="preprocessor">#include &lt;math.h&gt;</span>
00021 <span class="preprocessor">#include "<a class="code" href="boundary_8h.html">boundary.h</a>"</span>
00022 <span class="preprocessor">#include "<a class="code" href="hashtab_8h.html">hashtab.h</a>"</span>
00023 <span class="preprocessor">#include "<a class="code" href="node_8h.html">node.h</a>"</span>
00024 <span class="preprocessor">#include "<a class="code" href="struct_8h.html">struct.h</a>"</span>
00025 <span class="preprocessor">#include &lt;fstream.h&gt;</span>
00026 <span class="preprocessor">#include &lt;iostream.h&gt;</span>
00027 
00028 <span class="comment">//#define USE_FATHER</span>
00029 
<a name="l00031"></a><a class="code" href="classElement.html">00031</a> <span class="keyword">class </span><a class="code" href="classElement.html">Element</a>{
00032 
<a name="l00033"></a><a class="code" href="classElement.html#n0">00033</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classHashTable.html">HashTable</a>;
00034 
00035   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a2">AssertMeshErrorFree</a>(<a class="code" href="classHashTable.html">HashTable</a> *El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00036                                   <span class="keywordtype">int</span> numprocs, <span class="keywordtype">int</span> myid, <span class="keywordtype">double</span> loc);
00037 
00038   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a3">ElemBackgroundCheck</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00039                                   <span class="keywordtype">unsigned</span> *debugkey, FILE *fp);
00040 
00041   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a4">ElemBackgroundCheck2</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00042                                    <span class="keywordtype">void</span> *EmDebug, FILE *fp);
00043 
00044   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a5">NodeBackgroundCheck</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00045                                   <span class="keywordtype">unsigned</span> *debugkey, FILE *fp);
00046 
00047   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a7">delete_oldsons</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00048                              <span class="keywordtype">int</span> myid, <span class="keywordtype">void</span> *EmFather);
00049 
00050   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a8">refine_neigh_update</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable, 
00051                                   <span class="keywordtype">int</span> numprocs, <span class="keywordtype">int</span> myid, <span class="keywordtype">void</span>* RefinedList,
00052                                   <a class="code" href="structTimeProps.html">TimeProps</a>* timeprops_ptr);
00053 
00054   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="extfun_8h.html#a9">unrefine_neigh_update</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00055                                     <span class="keywordtype">int</span> myid, <span class="keywordtype">void</span>* NewFatherList);
00056   <span class="comment">//friend void unrefine_neigh_update(HashTable* El_Table, int myid, </span>
00057   <span class="comment">//int NumNewFathers, Element** NewFatherList);</span>
00058   <span class="comment">//friend void unrefine_neigh_update(HashTable* El_Table, int myid);</span>
00059 
00060   <span class="comment">/*</span>
00061 <span class="comment">  friend void  unrefine_interp_neigh_update(HashTable* El_Table,  </span>
00062 <span class="comment">                                            HashTable* NodeTable, int nump, </span>
00063 <span class="comment">                                            int myid, int NumOtherProcUpdate, </span>
00064 <span class="comment">                                            Element **OtherProcUpdate);</span>
00065 <span class="comment">  */</span>
00066   <span class="keyword">friend</span> <span class="keywordtype">void</span>  <a class="code" href="extfun_8h.html#a10">unrefine_interp_neigh_update</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, 
00067                                             <a class="code" href="classHashTable.html">HashTable</a>* NodeTable, <span class="keywordtype">int</span> nump, 
00068                                             <span class="keywordtype">int</span> myid, <span class="keywordtype">void</span>* OtherProcUpdate);
00069 
00070   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="repartition__BSFC_8h.html#a10">BSFC_combine_elements</a>(<span class="keywordtype">int</span> side, <a class="code" href="classElement.html">Element</a> *EmTemp, 
00071                                     <a class="code" href="classHashTable.html">HashTable</a> *HT_Elem_Ptr, 
00072                                     <a class="code" href="classHashTable.html">HashTable</a> *HT_Node_Ptr, 
00073                                     <span class="keywordtype">int</span> destination_proc);
00074  
00075   <span class="comment">//friend void Pack_element(Element* sendel, ElemPack** elemptr, HashTable* HT_Node_Ptr, int destination_proc);</span>
00076   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="fill_8C.html#a0">Pack_element</a>(<span class="keywordtype">void</span> *sendel, <a class="code" href="structElemPack.html">ElemPack</a>* elem,
00077                            <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">int</span> destination_proc);
00078 
00079   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="update__element__info_8C.html#a4">destroy_element</a>(<span class="keywordtype">void</span>  *r_element, <a class="code" href="classHashTable.html">HashTable</a>* HT_Elem_Ptr, 
00080                               <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">int</span> target_pro, <a class="code" href="structElementLink.html">ELinkPtr</a>* EL_head);
00081   
00082   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="update__element__info_8C.html#a6">create_element</a>(<a class="code" href="structElemPack.html">ElemPack</a>* elem2, <a class="code" href="classHashTable.html">HashTable</a>* HT_Elem_Ptr, 
00083                              <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">int</span> myid, <span class="keywordtype">double</span>* e_error);
00084 
00085   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="update__element__info_8C.html#a2">construct_el</a>(<a class="code" href="classElement.html">Element</a>* newelement, <a class="code" href="structElemPack.html">ElemPack</a>* elem2,
00086                            <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">int</span> myid, <span class="keywordtype">double</span>* e_error);
00087 
00088  <span class="keyword">public</span>:
00089 
<a name="l00091"></a><a class="code" href="classElement.html#a0">00091</a>   <a class="code" href="classHashTable.html#n0">Element</a>() {
00092     counted=0;
00093     father[0]=father[1]=0; <span class="comment">//initialize the father key to zero</span>
00094     Influx[0]=Influx[1]=Influx[2]=state_vars[0]=state_vars[1]=state_vars[2]=-1;
00095     adapted=TOBEDELETED;
00096     refined=1;
00097     Awet=0.0;
00098     Swet=1.0;
00099     drypoint[0]=drypoint[1]=0.0;
00100     iwetnode=8;
00101 
00102     stoppedflags=2; <span class="comment">//material in all elements start from rest</span>
00103     <span class="comment">//do_erosion=-1;</span>
00104   };  
00105   
00107   <a class="code" href="classHashTable.html#n0">Element</a>(<span class="keywordtype">unsigned</span> nodekeys[][KEYLENGTH], <span class="keywordtype">unsigned</span> neigh[][KEYLENGTH], 
00108           <span class="keywordtype">int</span> n_pro[], <a class="code" href="structBC.html">BC</a> *b, <span class="keywordtype">int</span> mat, <span class="keywordtype">int</span> *elm_loc_in, 
00109           <span class="keywordtype">double</span> pile_height, <span class="keywordtype">int</span> myid, <span class="keywordtype">unsigned</span> *opposite_brother);
00110 
00112   <a class="code" href="classHashTable.html#n0">Element</a>(<span class="keywordtype">unsigned</span> nodekeys[][KEYLENGTH], <span class="keywordtype">unsigned</span> neigh[][KEYLENGTH], 
00113           <span class="keywordtype">int</span> n_pro[], <a class="code" href="structBC.html">BC</a> *b, <span class="keywordtype">int</span> gen, <span class="keywordtype">int</span> elm_loc_in[], <span class="keywordtype">int</span> *ord, 
00114           <span class="keywordtype">int</span> gen_neigh[], <span class="keywordtype">int</span> mat, <a class="code" href="classElement.html">Element</a> *fthTemp, <span class="keywordtype">double</span> *coord_in,
00115           <a class="code" href="classHashTable.html">HashTable</a> *El_Table, <a class="code" href="classHashTable.html">HashTable</a> *NodeTable, <span class="keywordtype">int</span> myid, 
00116           <a class="code" href="structMatProps.html">MatProps</a> *matprops_ptr,
00117           <span class="keywordtype">int</span> iwetnodefather, <span class="keywordtype">double</span> Awetfather, <span class="keywordtype">double</span> *drypoint_in);
00118 
00120   <a class="code" href="classHashTable.html#n0">Element</a>(<a class="code" href="classElement.html">Element</a> *sons[], <a class="code" href="classHashTable.html">HashTable</a> *NodeTable, <a class="code" href="classHashTable.html">HashTable</a> *El_Table, 
00121           <a class="code" href="structMatProps.html">MatProps</a> *matprops_ptr);
00122 
00124   <a class="code" href="classHashTable.html#n0">Element</a>(FILE* fp, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable, <a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr, <span class="keywordtype">int</span> myid);
00125 
00127   ~<a class="code" href="classElement.html">Element</a>();
00128 
00130   <span class="keywordtype">void</span>      save_elem(FILE* fp, FILE* fptxt); <span class="comment">//for restart</span>
00131   
00133   <span class="keywordtype">unsigned</span>* pass_key();
00134 
00136   <span class="keywordtype">int</span>       get_material();
00137 
00139   <span class="keywordtype">void</span>      get_stiffness(<a class="code" href="classHashTable.html">HashTable</a>*, <a class="code" href="classHashTable.html">HashTable</a>*, <span class="keywordtype">double</span>*, <span class="keywordtype">double</span>*, <a class="code" href="classElement.html">Element</a>*);
00140 
00142   <span class="keywordtype">unsigned</span>* getNode();
00143 
00145   <span class="keywordtype">int</span>*      getassoc();
00146 
00148   <span class="keywordtype">int</span>       get_no_of_dof();
00149 
00151   <span class="keywordtype">void</span>      put_gen(<span class="keywordtype">int</span>);
00152 
00154   <span class="keywordtype">void</span>      putson(<span class="keywordtype">unsigned</span>*);
00155 
00157   <span class="keywordtype">void</span>      putbrothers(<span class="keywordtype">unsigned</span>*);
00158 
00160   <span class="keywordtype">unsigned</span>* get_brothers();
00161 
00163   <span class="keywordtype">void</span>      putassoc(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> i);
00164 
00166   <span class="keywordtype">void</span>      putneighbor(<span class="keywordtype">unsigned</span> *n, <span class="keywordtype">int</span> i);
00167 
00169   <span class="keywordtype">void</span>      put_neigh_proc(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> proc);
00170 
00172   <span class="keywordtype">void</span>      put_order(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
00173 
00175   <span class="keywordtype">int</span>*      get_order();
00176 
00178   <span class="keywordtype">unsigned</span>* getfather();
00179 
00181   <span class="keywordtype">void</span> put_father(<span class="keywordtype">unsigned</span> fatherin[KEYLENGTH]);
00182 
00184   <span class="keywordtype">unsigned</span>* getson();
00185 
00187   <span class="keywordtype">void</span>      putel_sq(<span class="keywordtype">double</span> solsq, <span class="keywordtype">double</span> ellsq);
00188 
00190   <span class="keywordtype">double</span>*   get_el_solution();
00191 
00193   <span class="keywordtype">double</span>*   get_el_error();
00194 
00196   <span class="keywordtype">unsigned</span>* get_neighbors();
00197 
00199   <span class="keywordtype">int</span>*      get_neigh_proc();
00200 
00202   <a class="code" href="structBC.html">BC</a>*       get_bcptr();
00203 
00205   <span class="keywordtype">int</span>       get_gen();
00206 
00208   <span class="keywordtype">int</span>       which_neighbor(<span class="keywordtype">unsigned</span> *FindNeigh);
00209 
00211   <span class="keywordtype">int</span>       get_refined_flag(); 
00212 
00214   <span class="keywordtype">int</span>       get_adapted_flag();
00215 
00216 
00218   <span class="keywordtype">void</span>      change_neighbor(<span class="keywordtype">unsigned</span> *newneighbs, <span class="keywordtype">int</span> which_side, <span class="keywordtype">int</span> proc, <span class="keywordtype">int</span> reg);
00219 
00221   <span class="keywordtype">void</span>      put_refined_flag(<span class="keywordtype">int</span> i);
00222 
00224   <span class="keywordtype">void</span>      put_adapted_flag(<span class="keywordtype">int</span> new_adapted_status);
00225 
00226 
00228   <span class="keywordtype">void</span>      put_send_flag(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
00229 
00231   <span class="keywordtype">void</span>      put_recv_flag(<span class="keywordtype">int</span>, <span class="keywordtype">int</span>); 
00232 
00234   <span class="keywordtype">int</span>       get_send_flag(<span class="keywordtype">int</span>); 
00235 
00237   <span class="keywordtype">int</span>       get_recv_flag(<span class="keywordtype">int</span>);
00238 
00240   <span class="keywordtype">int</span>*      get_neigh_gen();
00241 
00243   <span class="keywordtype">void</span>      put_neigh_gen(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> gen);
00244 
00246   <span class="keywordtype">void</span>      put_which_son(<span class="keywordtype">int</span>);
00247 
00249   <span class="keywordtype">int</span>       get_which_son();
00250 
00252   <span class="keywordtype">void</span>      calc_which_son();
00253 
00255   <span class="keywordtype">void</span>      put_new_old(<span class="keywordtype">int</span> i);
00256 
00258   <span class="keywordtype">int</span>       get_new_old();
00259   
00261   <span class="keywordtype">void</span>      update_ndof();
00262 
00264   <span class="keywordtype">void</span>      change_neighbor_process(<span class="keywordtype">int</span> which, <span class="keywordtype">int</span> newp);
00265   
00267   <span class="keywordtype">double</span>*   get_el_err();
00268 
00270   <span class="keywordtype">void</span>      get_nelb_icon(<a class="code" href="classHashTable.html">HashTable</a>*, <a class="code" href="classHashTable.html">HashTable</a>*,<span class="keywordtype">int</span>*,<span class="keywordtype">int</span>*);
00271 
00273   <span class="keywordtype">void</span>      void_bcptr();
00274 
00276   <span class="keywordtype">double</span>    get_lb_weight();
00277 
00279   <span class="keywordtype">void</span>      put_lb_weight(<span class="keywordtype">double</span> dd_in);
00280 
00282   <span class="keywordtype">unsigned</span>* get_lb_key();
00283 
00285   <span class="keywordtype">void</span>      put_lb_key(<span class="keywordtype">unsigned</span>* in_key);
00286 
00288   <span class="keywordtype">void</span>      copy_key_to_lb_key();
00289 
00291   <span class="keywordtype">void</span>      put_myprocess(<span class="keywordtype">int</span> in_proc);
00292 
00294   <span class="keywordtype">int</span>       get_myprocess();
00295 
00297   <span class="keywordtype">int</span>       get_opposite_brother_flag();
00298 
00300   <span class="keywordtype">void</span>      find_opposite_brother(<a class="code" href="classHashTable.html">HashTable</a>*);
00301   <span class="comment">//void      get_icon(HashTable*, HashTable*, int[4]);</span>
00302   <span class="comment">//void      get_boundary(int[4], double[4]);</span>
00303   <span class="comment">/* geoflow functions */</span>
00304 
00306   <span class="keywordtype">void</span>      put_height_mom(<span class="keywordtype">double</span> pile_height, <span class="keywordtype">double</span> xmom, <span class="keywordtype">double</span> ymom);
00307 
00309   <span class="keywordtype">void</span>      put_height(<span class="keywordtype">double</span> pile_height);
00310 
00312   <span class="keywordtype">double</span>*   get_state_vars();
00313 
00315   <span class="keywordtype">double</span>*   get_d_state_vars();
00316 
00318   <span class="keywordtype">double</span>*   get_zeta();
00319 
00321   <span class="keywordtype">double</span>*   get_dx();
00322 
00324   <span class="keywordtype">void</span>      find_positive_x_side(<a class="code" href="classHashTable.html">HashTable</a>*);
00325 
00327   <span class="keywordtype">int</span>       get_positive_x_side();
00328 
00330   <span class="keywordtype">void</span>      get_slopes(<a class="code" href="classHashTable.html">HashTable</a>*, <a class="code" href="classHashTable.html">HashTable</a>*, <span class="keywordtype">double</span>);
00331 
00333   <span class="keywordtype">double</span>*   get_prev_state_vars();
00334 
00336   <span class="keywordtype">void</span>      calculate_dx(<a class="code" href="classHashTable.html">HashTable</a>* NodeTable);
00337 
00339   <span class="keywordtype">void</span>      insert_coord(<a class="code" href="classHashTable.html">HashTable</a>* NodeTable);
00340 
00342   <span class="keywordtype">void</span>      zdirflux(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable, <a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr, <span class="keywordtype">int</span> order_flag, <span class="keywordtype">int</span> dir, <span class="keywordtype">double</span> hfv[3][NUM_STATE_VARS], <span class="keywordtype">double</span> hrfv[3][NUM_STATE_VARS], <a class="code" href="classElement.html">Element</a>* EmNeigh, <span class="keywordtype">double</span> dt);
00343 
00345   <span class="keywordtype">void</span>      xdirflux(<a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr, <span class="keywordtype">double</span> dz, <span class="keywordtype">double</span> thissideSwet, <span class="keywordtype">double</span> hfv[3][NUM_STATE_VARS], <span class="keywordtype">double</span> hrfv[3][NUM_STATE_VARS]);
00346 
00348   <span class="keywordtype">void</span>      ydirflux(<a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr, <span class="keywordtype">double</span> dz, <span class="keywordtype">double</span> thissideSwet, <span class="keywordtype">double</span> hfv[3][NUM_STATE_VARS], <span class="keywordtype">double</span> hrfv[3][NUM_STATE_VARS]);
00349 
00351   <span class="keywordtype">void</span>      <a class="code" href="geoflow_8h.html#a17">calc_edge_states</a>(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable,
00352                              <a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr, <span class="keywordtype">int</span> myid, <span class="keywordtype">double</span> dt, 
00353                              <span class="keywordtype">int</span>* order_flag, <span class="keywordtype">double</span> *outflow);
00354   
00356   <span class="keywordtype">double</span>*   get_eigenvxymax();
00357 
00359   <span class="keywordtype">void</span>      <a class="code" href="geoflow_8h.html#a4">correct</a>(<a class="code" href="classHashTable.html">HashTable</a>* NodeTable, <a class="code" href="classHashTable.html">HashTable</a>* El_Table,
00360                     <span class="keywordtype">double</span> dt, <a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr, 
00361                     <a class="code" href="structFluxProps.html">FluxProps</a> *fluxprops_ptr, <a class="code" href="structTimeProps.html">TimeProps</a> *timeprops_ptr, 
00362                     <span class="keywordtype">double</span> *forceint,<span class="keywordtype">double</span> *forcebed, 
00363                     <span class="keywordtype">double</span> *eroded, <span class="keywordtype">double</span> *deposited);
00364 
00366   <span class="keywordtype">void</span>      calc_shortspeed(<span class="keywordtype">double</span> inv_dt);
00367 
00369   <span class="keywordtype">double</span>    get_shortspeed();
00370 
00372   <span class="keywordtype">void</span>      put_shortspeed(<span class="keywordtype">double</span> shortspeedin);
00373 
00375   <span class="keywordtype">double</span>*   eval_velocity(<span class="keywordtype">double</span> xoffset, <span class="keywordtype">double</span> yoffset, <span class="keywordtype">double</span> VxVy[2]);
00376 
<a name="l00378"></a><a class="code" href="classElement.html#a85">00378</a>   <span class="keywordtype">double</span>*   get_coefABCD() {<span class="keywordflow">return</span> coefABCD;};
00379 
00381   <span class="keywordtype">double</span>*   get_kactxy();
00382 
00384   <span class="keywordtype">double</span>*   get_gravity();
00385 
00387   <span class="keywordtype">int</span>       determine_refinement(<span class="keywordtype">double</span>);
00388 
00390   <span class="keywordtype">double</span>    get_elevation();
00391 
00393   <span class="keywordtype">double</span>*   get_d_gravity();
00394 
00396   <span class="keywordtype">double</span>*   get_curvature();
00397 
00399   <span class="keywordtype">void</span>      put_lam(<span class="keywordtype">double</span> lam_in);
00400 
00402   <span class="keywordtype">double</span>    get_lam();
00403 
00405   <span class="keywordtype">void</span>      calc_flux_balance(<a class="code" href="classHashTable.html">HashTable</a> *NodeTable);
00406 
00408   <span class="keywordtype">void</span>      calc_topo_data(<a class="code" href="structMatProps.html">MatProps</a> *matprops_ptr);
00409 
00411   <span class="keywordtype">void</span>      calc_d_gravity(<a class="code" href="classHashTable.html">HashTable</a> *El_Table);
00412 
00414   <span class="keywordtype">void</span>      calc_gravity_vector(<a class="code" href="structMatProps.html">MatProps</a> *matprops_ptr);
00415   
00417   <span class="keywordtype">int</span> find_brothers(<a class="code" href="classHashTable.html">HashTable</a>* El_Table, <a class="code" href="classHashTable.html">HashTable</a>* NodeTable, 
00418                     <span class="keywordtype">double</span> target, <span class="keywordtype">int</span> myid, <a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr,
00419                     <span class="keywordtype">void</span>* NewFatherList, <span class="keywordtype">void</span>* OtherProcUpdate);
00420   <span class="comment">/*</span>
00422 <span class="comment">  int find_brothers(HashTable* El_Table, HashTable* NodeTable, </span>
00423 <span class="comment">                    double target, int myid, MatProps* matprops_ptr,</span>
00424 <span class="comment">                    Element **NewFatherList, int* NumNewFathers,</span>
00425 <span class="comment">                    Element **OtherProcUpdate, int *NumOtherProcUpdate); </span>
00426 <span class="comment">  */</span>
00427 
00429   <span class="keywordtype">int</span> check_unrefinement(<a class="code" href="classHashTable.html">HashTable</a> *El_Table, <span class="keywordtype">double</span> target);
00430 
00432   <span class="keywordtype">void</span> change_neigh_info(<span class="keywordtype">unsigned</span> *fth_key, <span class="keywordtype">unsigned</span> *ng_key, <span class="keywordtype">int</span> neworder, <span class="keywordtype">int</span> ng_gen, <span class="keywordtype">int</span> fth_proc);
00433 
00435   <span class="keywordtype">int</span>* get_elm_loc();
00436   
00438   <span class="keywordtype">void</span> put_elm_loc(<span class="keywordtype">int</span>* int_in);
00439 
00441   <span class="keywordtype">double</span>* get_coord();
00442 
00444   <span class="keywordtype">void</span> put_coord(<span class="keywordtype">double</span>* coord_in);
00445 
00447   <span class="keywordtype">void</span> calc_stop_crit(<a class="code" href="structMatProps.html">MatProps</a>*);
00448 
00450   <span class="keywordtype">void</span> put_stoppedflags(<span class="keywordtype">int</span> stoppedflagsin);
00451 
00453   <span class="keywordtype">int</span>  get_stoppedflags();
00454   
00456   <span class="keywordtype">void</span> zero_influx();
00457 
00459   <span class="keywordtype">double</span> *get_influx();
00460 
00462   <span class="keywordtype">void</span> <a class="code" href="flux__srcs_8h.html#a2">calc_flux</a>(<a class="code" href="classHashTable.html">HashTable</a> *NodeTable,<a class="code" href="structFluxProps.html">FluxProps</a> *fluxprops, 
00463                  <a class="code" href="structTimeProps.html">TimeProps</a> *timeprops);
00464 
00466   <span class="keywordtype">int</span> if_pile_boundary(<a class="code" href="classHashTable.html">HashTable</a> *ElemTable, <span class="keywordtype">double</span> contour_height);
00467 
00469   <span class="keywordtype">int</span> if_source_boundary(<a class="code" href="classHashTable.html">HashTable</a> *ElemTable);
00470 
00472   <span class="keywordtype">int</span> if_first_buffer_boundary(<a class="code" href="classHashTable.html">HashTable</a> *ElemTable, <span class="keywordtype">double</span> contour_height);
00473 
00475   <span class="keywordtype">int</span> if_next_buffer_boundary(<a class="code" href="classHashTable.html">HashTable</a> *ElemTable, <a class="code" href="classHashTable.html">HashTable</a> *NodeTable,
00476                               <span class="keywordtype">double</span> contour_height);
00477   
00479   <span class="keywordtype">int</span> get_counted();
00480 
00482   <span class="keywordtype">void</span> put_counted(<span class="keywordtype">int</span> countedvalue);
00483 
00485   <span class="keywordtype">int</span> get_ithelem();
00486 
00488   <span class="keywordtype">void</span> put_ithelem(<span class="keywordtype">int</span> i);
00489 
00491   <span class="keywordtype">double</span> get_effect_bedfrict();
00492 
00494   <span class="keywordtype">double</span>* get_effect_kactxy();
00495 
00496 
00498   <span class="keywordtype">double</span> get_Awet();
00499   
00501   <span class="keywordtype">void</span>   put_Awet(<span class="keywordtype">double</span> Awet_in);
00502 
00504   <span class="keywordtype">double</span> get_Swet();
00505 
00507   <span class="keywordtype">void</span>   put_Swet(<span class="keywordtype">double</span> Swet_in);
00508 
00510   <span class="keywordtype">int</span>  get_iwetnode();
00511 
00513   <span class="keywordtype">void</span> put_iwetnode(<span class="keywordtype">int</span> iwetnode_in);
00514 
00516   <span class="keywordtype">double</span>* get_drypoint();
00517 
00519   <span class="keywordtype">void</span>    put_drypoint(<span class="keywordtype">double</span> *drypoint_in);
00520 
00522   <span class="keywordtype">void</span> calc_wet_dry_orient(<a class="code" href="classHashTable.html">HashTable</a> *El_Table);
00523 
00525   <span class="keywordtype">double</span> calc_elem_edge_wet_fraction(<span class="keywordtype">int</span> ineigh, <span class="keywordtype">int</span> ifusewholeside);
00526 
00528   <span class="keywordtype">double</span> calc_elem_edge_wetness_factor(<span class="keywordtype">int</span> ineigh, <span class="keywordtype">double</span> dt);
00529 
00531   <span class="keywordtype">double</span> convect_dryline(<span class="keywordtype">double</span> VxVy[2], <span class="keywordtype">double</span> dt);
00532 
00533  <span class="keyword">private</span>:
<a name="l00535"></a><a class="code" href="classElement.html#r0">00535</a>   <span class="keywordtype">int</span> myprocess;
00536 
<a name="l00538"></a><a class="code" href="classElement.html#r1">00538</a>   <span class="keywordtype">int</span> generation;
00539 
<a name="l00541"></a><a class="code" href="classElement.html#r2">00541</a>   <span class="keywordtype">int</span> opposite_brother_flag;  
00542 
<a name="l00544"></a><a class="code" href="classElement.html#r3">00544</a>   <span class="keywordtype">int</span> material;
00546 
<a name="l00547"></a><a class="code" href="classElement.html#r4">00547</a>   <span class="keywordtype">double</span> lb_weight; 
00548 
<a name="l00550"></a><a class="code" href="classElement.html#r5">00550</a>   <span class="keywordtype">unsigned</span> lb_key[KEYLENGTH];  
00551 
<a name="l00553"></a><a class="code" href="classElement.html#r6">00553</a>   <span class="keywordtype">unsigned</span> key[KEYLENGTH];
00554 
<a name="l00556"></a><a class="code" href="classElement.html#r7">00556</a>   <span class="keywordtype">unsigned</span> node_key[8][KEYLENGTH];
00557 
<a name="l00559"></a><a class="code" href="classElement.html#r8">00559</a>   <span class="keywordtype">unsigned</span> neighbor[8][KEYLENGTH];
00560 
<a name="l00562"></a><a class="code" href="classElement.html#r9">00562</a>   <span class="keywordtype">unsigned</span> father[KEYLENGTH];
00563 
<a name="l00565"></a><a class="code" href="classElement.html#r10">00565</a>   <span class="keywordtype">unsigned</span> son[4][KEYLENGTH];
00566 
<a name="l00568"></a><a class="code" href="classElement.html#r11">00568</a>   <span class="keywordtype">int</span> neigh_proc[8];
00569 
<a name="l00571"></a><a class="code" href="classElement.html#r12">00571</a>   <span class="keywordtype">int</span> order[5];
00572 
<a name="l00574"></a><a class="code" href="classElement.html#r13">00574</a>   <span class="keywordtype">int</span> neigh_gen[8];
00575 
<a name="l00577"></a><a class="code" href="classElement.html#r14">00577</a>   <a class="code" href="structBC.html">BC</a>* bcptr;
00578 
<a name="l00580"></a><a class="code" href="classElement.html#r15">00580</a>   <span class="keywordtype">int</span> ndof;
00581 
<a name="l00583"></a><a class="code" href="classElement.html#r16">00583</a>   <span class="keywordtype">int</span> no_of_eqns;
00584 
<a name="l00586"></a><a class="code" href="classElement.html#r17">00586</a>   <span class="keywordtype">double</span> el_error[EQUATIONS];
00587 
<a name="l00589"></a><a class="code" href="classElement.html#r18">00589</a>   <span class="keywordtype">double</span> el_solution[EQUATIONS];
00590 
<a name="l00592"></a><a class="code" href="classElement.html#r19">00592</a>   <span class="keywordtype">int</span>    refined; 
00593 
<a name="l00595"></a><a class="code" href="classElement.html#r20">00595</a>   <span class="keywordtype">int</span>    adapted;
00596 
<a name="l00598"></a><a class="code" href="classElement.html#r21">00598</a>   <span class="keywordtype">int</span>    which_son;
00599 
<a name="l00601"></a><a class="code" href="classElement.html#r22">00601</a>   <span class="keywordtype">int</span>    new_old;
00602 
<a name="l00604"></a><a class="code" href="classElement.html#r23">00604</a>   <span class="keywordtype">unsigned</span> brothers[4][KEYLENGTH];
00605 
<a name="l00607"></a><a class="code" href="classElement.html#r24">00607</a>   <span class="keywordtype">double</span> coord[DIMENSION];
00608 
<a name="l00610"></a><a class="code" href="classElement.html#r25">00610</a>   <span class="keywordtype">int</span> elm_loc[2];
00611 
<a name="l00613"></a><a class="code" href="classElement.html#r26">00613</a>   <span class="keywordtype">int</span> send[8];
00614 
<a name="l00616"></a><a class="code" href="classElement.html#r27">00616</a>   <span class="keywordtype">int</span> recv[8];
00617 
00618   <span class="comment">/* variables for hyperbolic geoflow problem */</span>
00619 
<a name="l00621"></a><a class="code" href="classElement.html#r28">00621</a>   <span class="keywordtype">double</span> state_vars[NUM_STATE_VARS]; 
<a name="l00623"></a><a class="code" href="classElement.html#r29">00623</a>   <span class="keywordtype">double</span> prev_state_vars[NUM_STATE_VARS]; 
00624 
<a name="l00626"></a><a class="code" href="classElement.html#r30">00626</a>   <span class="keywordtype">double</span> d_state_vars[<a class="code" href="constant_8h.html#a45">NUM_STATE_VARS</a>*DIMENSION]; 
00627 
<a name="l00629"></a><a class="code" href="classElement.html#r31">00629</a>   <span class="keywordtype">double</span> shortspeed; 
00630 
<a name="l00632"></a><a class="code" href="classElement.html#r32">00632</a>   <span class="keywordtype">double</span> dx[DIMENSION]; 
00633 
<a name="l00635"></a><a class="code" href="classElement.html#r33">00635</a>   <span class="keywordtype">int</span>    positive_x_side; 
00636 
<a name="l00638"></a><a class="code" href="classElement.html#r34">00638</a>   <span class="keywordtype">double</span> eigenvxymax[DIMENSION];
00639 
<a name="l00641"></a><a class="code" href="classElement.html#r35">00641</a>   <span class="keywordtype">double</span> coefABCD[4];
00642 
<a name="l00644"></a><a class="code" href="classElement.html#r36">00644</a>   <span class="keywordtype">double</span> kactxy[DIMENSION];
00645 
<a name="l00647"></a><a class="code" href="classElement.html#r37">00647</a>   <span class="keywordtype">double</span> elevation; 
00648 
<a name="l00650"></a><a class="code" href="classElement.html#r38">00650</a>   <span class="keywordtype">double</span> zeta[DIMENSION];
00651 
<a name="l00653"></a><a class="code" href="classElement.html#r39">00653</a>   <span class="keywordtype">double</span> curvature[DIMENSION]; 
00654 
<a name="l00656"></a><a class="code" href="classElement.html#r40">00656</a>   <span class="keywordtype">double</span> gravity[3];
00657 
<a name="l00659"></a><a class="code" href="classElement.html#r41">00659</a>   <span class="keywordtype">double</span> d_gravity[DIMENSION]; 
00660 
<a name="l00662"></a><a class="code" href="classElement.html#r42">00662</a>   <span class="keywordtype">double</span> lam; 
00663 
<a name="l00665"></a><a class="code" href="classElement.html#r43">00665</a>   <span class="keywordtype">int</span> stoppedflags;
00666 
<a name="l00668"></a><a class="code" href="classElement.html#r44">00668</a>   <span class="keywordtype">double</span> effect_bedfrict;
00669 
<a name="l00671"></a><a class="code" href="classElement.html#r45">00671</a>   <span class="keywordtype">double</span> effect_tanbedfrict;
00672 
<a name="l00674"></a><a class="code" href="classElement.html#r46">00674</a>   <span class="keywordtype">double</span> effect_kactxy[2];
00675 
<a name="l00677"></a><a class="code" href="classElement.html#r47">00677</a>   <span class="keywordtype">double</span> Influx[3];
00678 
<a name="l00679"></a><a class="code" href="classElement.html#r48">00679</a>   <span class="keywordtype">int</span> counted;
00680   
<a name="l00682"></a><a class="code" href="classElement.html#r49">00682</a>   <span class="keywordtype">int</span> ithelem;
00683 
<a name="l00685"></a><a class="code" href="classElement.html#r50">00685</a>   <span class="keywordtype">int</span> iwetnode;
00686 
<a name="l00688"></a><a class="code" href="classElement.html#r51">00688</a>   <span class="keywordtype">double</span> Awet;
00689   
<a name="l00691"></a><a class="code" href="classElement.html#r52">00691</a>   <span class="keywordtype">double</span> drypoint[2];
00692 
<a name="l00694"></a><a class="code" href="classElement.html#r53">00694</a>   <span class="keywordtype">double</span> Swet;
00695 };
00696 
<a name="l00697"></a><a class="code" href="classElement.html#a117">00697</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a117">Element::get_ithelem</a>() {<span class="keywordflow">return</span> ithelem;};
00698 
<a name="l00699"></a><a class="code" href="classElement.html#a118">00699</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a118">Element::put_ithelem</a>(<span class="keywordtype">int</span> i) {<a class="code" href="classElement.html#r49">ithelem</a>=i;};
00700 
<a name="l00701"></a><a class="code" href="classElement.html#a7">00701</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElement.html#a7">Element::pass_key</a>(){<span class="keywordflow">return</span> key;};
00702 
<a name="l00703"></a><a class="code" href="classElement.html#a8">00703</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a8">Element::get_material</a>(){<span class="keywordflow">return</span> material;};
00704 
<a name="l00705"></a><a class="code" href="classElement.html#a16">00705</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElement.html#a16">Element::get_brothers</a>() {<span class="keywordflow">return</span> &amp;<a class="code" href="classElement.html#r23">brothers</a>[0][0];};
00706 
<a name="l00707"></a><a class="code" href="classElement.html#a53">00707</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a53">Element::void_bcptr</a>() {<a class="code" href="classElement.html#r14">bcptr</a> = NULL;};
00708 
<a name="l00709"></a><a class="code" href="classElement.html#a54">00709</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classElement.html#a54">Element::get_lb_weight</a>() {<span class="keywordflow">return</span> lb_weight;}; 
00710 
<a name="l00711"></a><a class="code" href="classElement.html#a55">00711</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a55">Element::put_lb_weight</a>(<span class="keywordtype">double</span> dd_in) {<a class="code" href="classElement.html#r4">lb_weight</a> = dd_in;}; 
00712 
<a name="l00713"></a><a class="code" href="classElement.html#a56">00713</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElement.html#a56">Element::get_lb_key</a>() {<span class="keywordflow">return</span> lb_key;}; 
00714 
<a name="l00715"></a><a class="code" href="classElement.html#a59">00715</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a59">Element::put_myprocess</a>(<span class="keywordtype">int</span> in_proc) {<a class="code" href="classElement.html#r0">myprocess</a> = in_proc;}; 
00716 
<a name="l00717"></a><a class="code" href="classElement.html#a60">00717</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a60">Element::get_myprocess</a>() {<span class="keywordflow">return</span> myprocess;}; 
00718 
<a name="l00719"></a><a class="code" href="classElement.html#a61">00719</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a61">Element::get_opposite_brother_flag</a>() {<span class="keywordflow">return</span> opposite_brother_flag;};
00720   
<a name="l00721"></a><a class="code" href="classElement.html#a63">00721</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a63">Element::put_height_mom</a>(<span class="keywordtype">double</span> pile_height, <span class="keywordtype">double</span> xmom, <span class="keywordtype">double</span> ymom) {
00722   <a class="code" href="classElement.html#r29">prev_state_vars</a>[0]=<a class="code" href="classElement.html#r28">state_vars</a>[0]=pile_height; 
00723   <a class="code" href="classElement.html#r29">prev_state_vars</a>[1]=<a class="code" href="classElement.html#r28">state_vars</a>[1]=xmom; 
00724   <a class="code" href="classElement.html#r29">prev_state_vars</a>[2]=<a class="code" href="classElement.html#r28">state_vars</a>[2]=ymom; 
00725   <span class="keywordflow">if</span>(pile_height&gt;GEOFLOW_TINY){
00726     <a class="code" href="classElement.html#r31">shortspeed</a>=sqrt(xmom*xmom+ymom*ymom)/pile_height;
00727     <a class="code" href="classElement.html#r51">Awet</a>=1.0;
00728   }
00729   <span class="keywordflow">else</span>{
00730     <a class="code" href="classElement.html#r31">shortspeed</a>=0.0;
00731     <a class="code" href="classElement.html#r51">Awet</a>=0.0;
00732   }
00733   
00734 
00735   <span class="keywordflow">return</span>;
00736 };
00737 
<a name="l00738"></a><a class="code" href="classElement.html#a64">00738</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a64">Element::put_height</a>(<span class="keywordtype">double</span> pile_height) {<a class="code" href="classElement.html#a63">put_height_mom</a>(pile_height,0.0,0.0); <span class="keywordflow">return</span>;}; 
00739 
<a name="l00740"></a><a class="code" href="classElement.html#a65">00740</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a65">Element::get_state_vars</a>() {<span class="keywordflow">return</span> state_vars;};
00741 
<a name="l00742"></a><a class="code" href="classElement.html#a66">00742</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a66">Element::get_d_state_vars</a>() {<span class="keywordflow">return</span> d_state_vars;};
00743 
<a name="l00744"></a><a class="code" href="classElement.html#a68">00744</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a68">Element::get_dx</a>() {<span class="keywordflow">return</span> dx;};
00745 
<a name="l00746"></a><a class="code" href="classElement.html#a70">00746</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a70">Element::get_positive_x_side</a>() {<span class="keywordflow">return</span> positive_x_side;};
00747 
<a name="l00748"></a><a class="code" href="classElement.html#a72">00748</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a72">Element::get_prev_state_vars</a>() {<span class="keywordflow">return</span> prev_state_vars;};
00749 
<a name="l00750"></a><a class="code" href="classElement.html#a79">00750</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a79">Element::get_eigenvxymax</a>() {<span class="keywordflow">return</span> eigenvxymax;};
00751 
<a name="l00752"></a><a class="code" href="classElement.html#a82">00752</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classElement.html#a82">Element::get_shortspeed</a>() {<span class="keywordflow">return</span> shortspeed;};
00753 
<a name="l00754"></a><a class="code" href="classElement.html#a83">00754</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a83">Element::put_shortspeed</a>(<span class="keywordtype">double</span> shortspeedin) {<a class="code" href="classElement.html#r31">shortspeed</a>=shortspeedin; <span class="keywordflow">return</span>;};
00755 
<a name="l00756"></a><a class="code" href="classElement.html#a86">00756</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a86">Element::get_kactxy</a>() {<span class="keywordflow">return</span> kactxy;};  
00757 
<a name="l00758"></a><a class="code" href="classElement.html#a87">00758</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a87">Element::get_gravity</a>() {<span class="keywordflow">return</span> gravity;};
00759 
<a name="l00760"></a><a class="code" href="classElement.html#a89">00760</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classElement.html#a89">Element::get_elevation</a>() {<span class="keywordflow">return</span> elevation;};  
00761 
<a name="l00762"></a><a class="code" href="classElement.html#a90">00762</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a90">Element::get_d_gravity</a>() {<span class="keywordflow">return</span> d_gravity;};  
00763 
<a name="l00764"></a><a class="code" href="classElement.html#a91">00764</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a91">Element::get_curvature</a>() {<span class="keywordflow">return</span> curvature;};
00765 
<a name="l00766"></a><a class="code" href="classElement.html#a92">00766</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a92">Element::put_lam</a>(<span class="keywordtype">double</span> lam_in) {<a class="code" href="classElement.html#r42">lam</a> = lam_in;};
00767 
<a name="l00768"></a><a class="code" href="classElement.html#a93">00768</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classElement.html#a93">Element::get_lam</a>() {<span class="keywordflow">return</span> lam;}; 
00769 
<a name="l00770"></a><a class="code" href="classElement.html#a101">00770</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>* <a class="code" href="classElement.html#a101">Element::get_elm_loc</a>() {<span class="keywordflow">return</span> elm_loc;};  
00771 
<a name="l00772"></a><a class="code" href="classElement.html#a102">00772</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a102">Element::put_elm_loc</a>(<span class="keywordtype">int</span>* int_in) {<a class="code" href="classElement.html#r25">elm_loc</a>[0] = int_in[0]; <a class="code" href="classElement.html#r25">elm_loc</a>[1] = int_in[1];};  
00773 
<a name="l00774"></a><a class="code" href="classElement.html#a103">00774</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a103">Element::get_coord</a>() {<span class="keywordflow">return</span> coord;};  
00775 
<a name="l00776"></a><a class="code" href="classElement.html#a106">00776</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a106">Element::put_stoppedflags</a>(<span class="keywordtype">int</span> stoppedflagsin) {<a class="code" href="classElement.html#r43">stoppedflags</a>=stoppedflagsin;};
00777   
<a name="l00778"></a><a class="code" href="classElement.html#a107">00778</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a107">Element::get_stoppedflags</a>() {<span class="keywordflow">return</span> stoppedflags;};
00779 
00780 
00781 <span class="comment">//above this line Keith made inline 20061128</span>
00782 
<a name="l00783"></a><a class="code" href="classElement.html#a11">00783</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>* <a class="code" href="classElement.html#a11">Element::getassoc</a>(){ <span class="keywordflow">return</span> neigh_proc;}
00784 
<a name="l00785"></a><a class="code" href="classElement.html#a10">00785</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElement.html#a10">Element:: getNode</a>(){ <span class="keywordflow">return</span> &amp;(<a class="code" href="classElement.html#r7">node_key</a>[0][0]);}
00786 
<a name="l00787"></a><a class="code" href="classElement.html#a12">00787</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a12">Element::get_no_of_dof</a>(){<span class="keywordflow">return</span> ndof;}
00788 
<a name="l00789"></a><a class="code" href="classElement.html#a13">00789</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a13">Element::put_gen</a>(<span class="keywordtype">int</span> g){<a class="code" href="classElement.html#r1">generation</a> = g;}
00790 
<a name="l00791"></a><a class="code" href="classElement.html#a19">00791</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a19">Element::put_neigh_proc</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> proc) { <a class="code" href="classElement.html#r11">neigh_proc</a>[i] = proc;}
00792 
<a name="l00793"></a><a class="code" href="classElement.html#a20">00793</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a20">Element::put_order</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> ord) {<a class="code" href="classElement.html#r12">order</a>[i] = ord;}
00794 
<a name="l00795"></a><a class="code" href="classElement.html#a24">00795</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElement.html#a24">Element::getson</a>(){<span class="keywordflow">return</span> &amp;(<a class="code" href="classElement.html#r10">son</a>[0][0]);}
00796 
<a name="l00797"></a><a class="code" href="classElement.html#a21">00797</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>* <a class="code" href="classElement.html#a21">Element::get_order</a>(){<span class="keywordflow">return</span> order;}
00798 
<a name="l00799"></a><a class="code" href="classElement.html#a14">00799</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a14">Element::putson</a>(<span class="keywordtype">unsigned</span>* s)
00800 {
00801 
00802   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;4; i++)
00803     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;KEYLENGTH;j++)  
00804       <a class="code" href="classElement.html#r10">son</a>[i][j] = *(s+i*<a class="code" href="constant_8h.html#a10">KEYLENGTH</a>+j);
00805 
00806   <a class="code" href="classElement.html#r19">refined</a>=1;
00807   <a class="code" href="classElement.html#r20">adapted</a>=OLDFATHER;
00808 }
00809 
<a name="l00810"></a><a class="code" href="classElement.html#a15">00810</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a15">Element::putbrothers</a>(<span class="keywordtype">unsigned</span>* s)
00811 {
00812 
00813   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;4; i++)
00814     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> j=0; j&lt;KEYLENGTH;j++)  
00815       <a class="code" href="classElement.html#r23">brothers</a>[i][j] = *(s+i*<a class="code" href="constant_8h.html#a10">KEYLENGTH</a>+j);
00816 
00817   <span class="keywordflow">return</span>;
00818 }
00819 
<a name="l00820"></a><a class="code" href="classElement.html#a18">00820</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a18">Element::putneighbor</a>(<span class="keywordtype">unsigned</span>* n, <span class="keywordtype">int</span> i)
00821 {
00822   <span class="keywordtype">int</span> j;
00823   <span class="keywordflow">for</span>(j=0; j&lt;KEYLENGTH;j++)  <a class="code" href="classElement.html#r8">neighbor</a>[i][j] = *(n+j);
00824 }
00825 
<a name="l00826"></a><a class="code" href="classElement.html#a17">00826</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a17">Element::putassoc</a>(<span class="keywordtype">int</span> a, <span class="keywordtype">int</span> i){<a class="code" href="classElement.html#r11">neigh_proc</a>[i] = a;}
00827 
<a name="l00828"></a><a class="code" href="classElement.html#a25">00828</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a25">Element::putel_sq</a>(<span class="keywordtype">double</span> solsq, <span class="keywordtype">double</span> errsq)
00829 {  
00830   <a class="code" href="classElement.html#r18">el_solution</a>[0] = solsq;
00831   <a class="code" href="classElement.html#r17">el_error</a>[0] = errsq;
00832 }
00833 
<a name="l00834"></a><a class="code" href="classElement.html#a26">00834</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a26">Element::get_el_solution</a>()
00835 {<span class="keywordflow">return</span> el_solution;}
00836 
<a name="l00837"></a><a class="code" href="classElement.html#a27">00837</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a27">Element::get_el_error</a>()
00838 {<span class="keywordflow">return</span> el_error;}
00839 
<a name="l00840"></a><a class="code" href="classElement.html#a28">00840</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElement.html#a28">Element::get_neighbors</a>()
00841 {<span class="keywordflow">return</span> &amp;<a class="code" href="classElement.html#r8">neighbor</a>[0][0];}
00842 
<a name="l00843"></a><a class="code" href="classElement.html#a29">00843</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>* <a class="code" href="classElement.html#a29">Element::get_neigh_proc</a>()
00844 {<span class="keywordflow">return</span> neigh_proc;}
00845 
<a name="l00846"></a><a class="code" href="classElement.html#a30">00846</a> <span class="keyword">inline</span> <a class="code" href="structBC.html">BC</a>* <a class="code" href="classElement.html#a30">Element::get_bcptr</a>()
00847 {<span class="keywordflow">return</span> bcptr;}
00848 
<a name="l00849"></a><a class="code" href="classElement.html#a31">00849</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a31">Element::get_gen</a>()
00850 {<span class="keywordflow">return</span> generation;}
00851 
<a name="l00852"></a><a class="code" href="classElement.html#a33">00852</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a33">Element::get_refined_flag</a>()
00853 {<span class="keywordflow">return</span> refined;} 
00854 
<a name="l00855"></a><a class="code" href="classElement.html#a36">00855</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a36">Element::put_refined_flag</a>(<span class="keywordtype">int</span> i)
00856 {<a class="code" href="classElement.html#r19">refined</a> = i;}
00857 
<a name="l00858"></a><a class="code" href="classElement.html#a34">00858</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a34">Element::get_adapted_flag</a>() {<span class="keywordflow">return</span> adapted;} 
00859 
<a name="l00860"></a><a class="code" href="classElement.html#a37">00860</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a37">Element::put_adapted_flag</a>(<span class="keywordtype">int</span> new_adapted_status) {<a class="code" href="classElement.html#r20">adapted</a> = new_adapted_status;}
00861 
00862 
00863 
<a name="l00864"></a><a class="code" href="classElement.html#a38">00864</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a38">Element::put_send_flag</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j) {<a class="code" href="classElement.html#r26">send</a>[i] = j;}
00865 
<a name="l00866"></a><a class="code" href="classElement.html#a40">00866</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a40">Element::get_send_flag</a>(<span class="keywordtype">int</span> i) {<span class="keywordflow">return</span> <a class="code" href="classElement.html#r26">send</a>[i];}
00867 
<a name="l00868"></a><a class="code" href="classElement.html#a39">00868</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a39">Element::put_recv_flag</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> j) {<a class="code" href="classElement.html#r27">recv</a>[i] = j;}
00869 
<a name="l00870"></a><a class="code" href="classElement.html#a41">00870</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a41">Element::get_recv_flag</a>(<span class="keywordtype">int</span> i) {<span class="keywordflow">return</span> <a class="code" href="classElement.html#r27">recv</a>[i];}
00871 
<a name="l00872"></a><a class="code" href="classElement.html#a42">00872</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>* <a class="code" href="classElement.html#a42">Element::get_neigh_gen</a>() {<span class="keywordflow">return</span> neigh_gen;}
00873 
<a name="l00874"></a><a class="code" href="classElement.html#a43">00874</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a43">Element::put_neigh_gen</a>(<span class="keywordtype">int</span> i, <span class="keywordtype">int</span> gen) {<a class="code" href="classElement.html#r13">neigh_gen</a>[i] = gen;}
00875 
<a name="l00876"></a><a class="code" href="classElement.html#a44">00876</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a44">Element::put_which_son</a>(<span class="keywordtype">int</span> i){ <a class="code" href="classElement.html#r21">which_son</a> = i;}
00877 
<a name="l00878"></a><a class="code" href="classElement.html#a45">00878</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>  <a class="code" href="classElement.html#a45">Element::get_which_son</a>(){<span class="keywordflow">return</span> which_son;}
00879 
<a name="l00880"></a><a class="code" href="classElement.html#a48">00880</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>  <a class="code" href="classElement.html#a48">Element::get_new_old</a>(){<span class="keywordflow">return</span> new_old;}
00881 
<a name="l00882"></a><a class="code" href="classElement.html#a47">00882</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a47">Element::put_new_old</a>(<span class="keywordtype">int</span> i) {<a class="code" href="classElement.html#r22">new_old</a> = i;}
00883 
<a name="l00884"></a><a class="code" href="classElement.html#a50">00884</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a50">Element::change_neighbor_process</a>(<span class="keywordtype">int</span> which, <span class="keywordtype">int</span> newp){<a class="code" href="classElement.html#r11">neigh_proc</a>[which]=newp;}
00885 
<a name="l00886"></a><a class="code" href="classElement.html#a108">00886</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a108">Element::zero_influx</a>() {<a class="code" href="classElement.html#r47">Influx</a>[0]=<a class="code" href="classElement.html#r47">Influx</a>[1]=<a class="code" href="classElement.html#r47">Influx</a>[2]=0.0;};
00887 
<a name="l00888"></a><a class="code" href="classElement.html#a109">00888</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a109">Element::get_influx</a>() {<span class="keywordflow">return</span> Influx;};
00889 
00890 <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a23">Element::put_father</a>(<span class="keywordtype">unsigned</span> *fatherin){
00891   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> ikey=0;ikey&lt;KEYLENGTH;ikey++) father[ikey]=fatherin[ikey];};
00892 
<a name="l00893"></a><a class="code" href="classElement.html#a115">00893</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classElement.html#a115">Element::get_counted</a>() {<span class="keywordflow">return</span> counted;};
00894 
<a name="l00895"></a><a class="code" href="classElement.html#a116">00895</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElement.html#a116">Element::put_counted</a>(<span class="keywordtype">int</span> countedvalue) {<a class="code" href="classElement.html#r48">counted</a>=countedvalue;};
00896 
<a name="l00897"></a><a class="code" href="classElement.html#a119">00897</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>  <a class="code" href="classElement.html#a119">Element::get_effect_bedfrict</a>(){<span class="keywordflow">return</span> effect_bedfrict;};
<a name="l00898"></a><a class="code" href="classElement.html#a120">00898</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a120">Element::get_effect_kactxy</a>(){<span class="keywordflow">return</span> effect_kactxy;};
00899 
<a name="l00900"></a><a class="code" href="classElement.html#a121">00900</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>  <a class="code" href="classElement.html#a121">Element::get_Awet</a>(){<span class="keywordflow">return</span> Awet;};
<a name="l00901"></a><a class="code" href="classElement.html#a122">00901</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>    <a class="code" href="classElement.html#a122">Element::put_Awet</a>(<span class="keywordtype">double</span> Awet_in){<a class="code" href="classElement.html#r51">Awet</a>=Awet_in; <span class="keywordflow">return</span>;};
<a name="l00902"></a><a class="code" href="classElement.html#a123">00902</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>  <a class="code" href="classElement.html#a123">Element::get_Swet</a>(){<span class="keywordflow">return</span> Swet;};
<a name="l00903"></a><a class="code" href="classElement.html#a124">00903</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>    <a class="code" href="classElement.html#a124">Element::put_Swet</a>(<span class="keywordtype">double</span> Swet_in){<a class="code" href="classElement.html#r53">Swet</a>=Swet_in; <span class="keywordflow">return</span>;};
<a name="l00904"></a><a class="code" href="classElement.html#a125">00904</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>     <a class="code" href="classElement.html#a125">Element::get_iwetnode</a>(){<span class="keywordflow">return</span> iwetnode;};
<a name="l00905"></a><a class="code" href="classElement.html#a126">00905</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>    <a class="code" href="classElement.html#a126">Element::put_iwetnode</a>(<span class="keywordtype">int</span> iwetnode_in){<a class="code" href="classElement.html#r50">iwetnode</a>=iwetnode_in; <span class="keywordflow">return</span>;};
<a name="l00906"></a><a class="code" href="classElement.html#a127">00906</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classElement.html#a127">Element::get_drypoint</a>(){<span class="keywordflow">return</span> drypoint;};
<a name="l00907"></a><a class="code" href="classElement.html#a128">00907</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>    <a class="code" href="classElement.html#a128">Element::put_drypoint</a>(<span class="keywordtype">double</span> *drypoint_in){<a class="code" href="classElement.html#r52">drypoint</a>[0]=drypoint_in[0];<a class="code" href="classElement.html#r52">drypoint</a>[1]=drypoint_in[1]; <span class="keywordflow">return</span>;};
00908 
00909 
00910 <span class="comment">/*************************************************************************/</span>
00911 <span class="comment">/*************************************************************************/</span>
00912 <span class="comment">/*************************************************************************/</span>
00913 <span class="comment">/*************************************************************************/</span>
00914 <span class="comment">/*************************************************************************/</span>
00915 <span class="comment">/*************************************************************************/</span>
00916 
<a name="l00918"></a><a class="code" href="classElemPtrList.html">00918</a> <span class="keyword">class </span><a class="code" href="classElemPtrList.html">ElemPtrList</a>{
00919  <span class="keyword">public</span>:
00920 
00921   <span class="comment">/*</span>
00922 <span class="comment">  ElemPtrList();</span>
00923 <span class="comment">  ElemPtrList(int initial_size);</span>
00924 <span class="comment">  ~ElemPtrList();</span>
00925 <span class="comment">  void add(Element* EmTemp);</span>
00926 <span class="comment">  */</span>
00927 
<a name="l00929"></a><a class="code" href="classElemPtrList.html#a0">00929</a>   <a class="code" href="classElemPtrList.html">ElemPtrList</a>(){
00930     init(1024);
00931     <span class="keywordflow">return</span>;
00932   };
00933 
<a name="l00935"></a><a class="code" href="classElemPtrList.html#a1">00935</a>   <a class="code" href="classElemPtrList.html">ElemPtrList</a>(<span class="keywordtype">int</span> initial_size){  
00936     <span class="keywordflow">if</span>(initial_size==0) initial_size=1024;
00937     init(initial_size);
00938     <span class="keywordflow">return</span>;
00939   };
00940 
<a name="l00942"></a><a class="code" href="classElemPtrList.html#a2">00942</a>   ~<a class="code" href="classElemPtrList.html">ElemPtrList</a>(){
00943     <span class="comment">//printf("list_space=%d, num_elem=%d, inewstart=%d\n",list_space,num_elem,inewstart);</span>
00944     free(list);
00945     <span class="keywordflow">return</span>;
00946   }
00947 
00949   <span class="keywordtype">void</span> add(<a class="code" href="classElement.html">Element</a>* EmTemp);
00950 
00952   <a class="code" href="classElement.html">Element</a>*  get(<span class="keywordtype">int</span> i);
00953 
00955   <span class="keywordtype">unsigned</span>* get_key(<span class="keywordtype">int</span> i);
00956 
00958   <span class="keywordtype">int</span>       get_num_elem();
00959 
00961   <span class="keywordtype">void</span>      set_inewstart(<span class="keywordtype">int</span> inewstart_in);
00962   
00964   <span class="keywordtype">int</span>       get_inewstart();
00965 
00967   <span class="keywordtype">void</span>      trashlist();
00968 
00969  <span class="keyword">private</span>:
00971   <span class="comment">//void      init(int initial_size);</span>
<a name="l00972"></a><a class="code" href="classElemPtrList.html#d0">00972</a>   <span class="keywordtype">void</span>      init(<span class="keywordtype">int</span> initial_size){
00973     list_space=size_increment=initial_size;    
00974     num_elem=inewstart=0;
00975     list=(<a class="code" href="classElement.html">Element</a> **) malloc(list_space*<span class="keyword">sizeof</span>(<a class="code" href="classElement.html">Element</a>*));
00976     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;list_space;i++) list[i]=NULL;
00977   };
00978   
<a name="l00980"></a><a class="code" href="classElemPtrList.html#r0">00980</a>   <span class="keywordtype">int</span>       num_elem;
00981   
<a name="l00983"></a><a class="code" href="classElemPtrList.html#r1">00983</a>   <span class="keywordtype">int</span>       size_increment;
00984 
<a name="l00986"></a><a class="code" href="classElemPtrList.html#r2">00986</a>   <span class="keywordtype">int</span>       list_space;
00987 
<a name="l00989"></a><a class="code" href="classElemPtrList.html#r3">00989</a>   <span class="keywordtype">int</span>       inewstart;
00990   
<a name="l00992"></a><a class="code" href="classElemPtrList.html#r4">00992</a>   <a class="code" href="classElement.html">Element</a>** list;
00993 };
00994 
<a name="l00995"></a><a class="code" href="classElemPtrList.html#a4">00995</a> <span class="keyword">inline</span> <a class="code" href="classElement.html">Element</a>*  <a class="code" href="classElemPtrList.html#a4">ElemPtrList::get</a>(<span class="keywordtype">int</span> i){<span class="keywordflow">return</span> (((i&gt;=0)&amp;&amp;(i&lt;num_elem))?<a class="code" href="classElemPtrList.html#r4">list</a>[i]:NULL);};
<a name="l00996"></a><a class="code" href="classElemPtrList.html#a5">00996</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classElemPtrList.html#a5">ElemPtrList::get_key</a>(<span class="keywordtype">int</span> i){<span class="keywordflow">return</span> (((i&gt;=0)&amp;&amp;(i&lt;num_elem))?<a class="code" href="classElemPtrList.html#r4">list</a>[i]-&gt;<a class="code" href="classElement.html#a7">pass_key</a>():NULL);};
<a name="l00997"></a><a class="code" href="classElemPtrList.html#a8">00997</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>       <a class="code" href="classElemPtrList.html#a8">ElemPtrList::get_inewstart</a>(){<span class="keywordflow">return</span> inewstart;};
<a name="l00998"></a><a class="code" href="classElemPtrList.html#a7">00998</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>      <a class="code" href="classElemPtrList.html#a7">ElemPtrList::set_inewstart</a>(<span class="keywordtype">int</span> inewstart_in){<a class="code" href="classElemPtrList.html#r3">inewstart</a>=inewstart_in; <span class="keywordflow">return</span>;};
<a name="l00999"></a><a class="code" href="classElemPtrList.html#a6">00999</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>       <a class="code" href="classElemPtrList.html#a6">ElemPtrList::get_num_elem</a>(){<span class="keywordflow">return</span> num_elem;};
01000 
<a name="l01001"></a><a class="code" href="classElemPtrList.html#a9">01001</a> <span class="keyword">inline</span> <span class="keywordtype">void</span>      <a class="code" href="classElemPtrList.html#a9">ElemPtrList::trashlist</a>(){
01002   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0;i&lt;num_elem;i++) <a class="code" href="classElemPtrList.html#r4">list</a>[i]=NULL; 
01003   num_elem=<a class="code" href="classElemPtrList.html#r3">inewstart</a>=0; 
01004   <span class="keywordflow">return</span>;
01005 };
01006 
<a name="l01007"></a><a class="code" href="classElemPtrList.html#a3">01007</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classElemPtrList.html#a3">ElemPtrList::add</a>(<a class="code" href="classElement.html">Element</a>* EmTemp){
01008   <span class="keywordflow">if</span>(<a class="code" href="classElemPtrList.html#r0">num_elem</a>==<a class="code" href="classElemPtrList.html#r2">list_space</a>-1){
01009     <a class="code" href="classElemPtrList.html#r2">list_space</a>+=size_increment;
01010     <a class="code" href="classElemPtrList.html#r4">list</a>=(<a class="code" href="classElement.html">Element</a> **) realloc(<a class="code" href="classElemPtrList.html#r4">list</a>,<a class="code" href="classElemPtrList.html#r2">list_space</a>*<span class="keyword">sizeof</span>(<a class="code" href="classElement.html">Element</a> *));
01011   }
01012 
01013   <a class="code" href="classElemPtrList.html#r4">list</a>[num_elem]=EmTemp;
01014   <a class="code" href="classElemPtrList.html#r0">num_elem</a>++;
01015   <span class="keywordflow">return</span>;
01016 };
01017   
01018 
01019 
01020 <span class="preprocessor">#endif</span>
01021 <span class="preprocessor"></span>
01022 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Jul 3 12:45:53 2007 for Titan by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.3.9.1 </small></address>
</body>
</html>
