<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Titan: hashtab.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="namespaces.html">Namespace List</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a> | <a class="qindex" href="globals.html">File&nbsp;Members</a></div>
<div class="nav">
<a class="el" href="dir_000000.html">src</a>&nbsp;/&nbsp;<a class="el" href="dir_000001.html">header</a></div>
<h1>hashtab.h</h1><a href="hashtab_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment">00001 <span class="comment">/*******************************************************************</span>
00002 <span class="comment"> * Copyright (C) 2003 University at Buffalo</span>
00003 <span class="comment"> *</span>
00004 <span class="comment"> * This software can be redistributed free of charge.  See COPYING</span>
00005 <span class="comment"> * file in the top distribution directory for more details.</span>
00006 <span class="comment"> *</span>
00007 <span class="comment"> * This software is distributed in the hope that it will be useful,</span>
00008 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00009 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
00010 <span class="comment"> *</span>
00011 <span class="comment"> * Author: </span>
00012 <span class="comment"> * Description: </span>
00013 <span class="comment"> *</span>
00014 <span class="comment"> *******************************************************************</span>
00015 <span class="comment"> * $Id: hashtab.h 129 2007-06-07 19:54:28Z dkumar $ </span>
00016 <span class="comment"> */</span>
00017 
00018 <span class="comment">/* Hash table */</span>
00019 <span class="comment">/* Every table can process NBUCKETS entries */</span>
00020 <span class="comment">/* All buckets with the same entry are linked together*/</span>
00021 <span class="comment">/* The pointer to the first bucket is stored in the table */</span>
00022 <span class="comment">/*---------------------------------------------------------*/</span>
00023 
00024 <span class="preprocessor">#ifndef HASHTABLE_H</span>
00025 <span class="preprocessor"></span><span class="preprocessor">#define HASHTABLE_H</span>
00026 <span class="preprocessor"></span>
00027 <span class="preprocessor">#include &lt;fstream.h&gt;</span>
00028 <span class="preprocessor">#include &lt;iostream.h&gt;</span>
00029 <span class="preprocessor">#include &lt;stdio.h&gt;</span>
00030 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>
00031 <span class="preprocessor">#include "<a class="code" href="constant_8h.html">constant.h</a>"</span>
00032 
00033 
<a name="l00034"></a><a class="code" href="structHashEntry.html">00034</a> <span class="keyword">struct </span><a class="code" href="structHashEntry.html">HashEntry</a>{
<a name="l00035"></a><a class="code" href="structHashEntry.html#o0">00035</a>   <span class="keywordtype">unsigned</span>   key[KEYLENGTH];  <span class="comment">//key: object key word</span>
<a name="l00036"></a><a class="code" href="structHashEntry.html#o1">00036</a>   <span class="keywordtype">void</span>*      value;   <span class="comment">//value: poiter to record</span>
<a name="l00037"></a><a class="code" href="structHashEntry.html#o2">00037</a>   <a class="code" href="structHashEntry.html">HashEntry</a>* pre;
<a name="l00038"></a><a class="code" href="structHashEntry.html#o3">00038</a>   <a class="code" href="structHashEntry.html">HashEntry</a>* next;    <span class="comment">//pre, next: objects with same entry will be stored in a two-way link</span>
00039 
<a name="l00040"></a><a class="code" href="structHashEntry.html#a0">00040</a>   <a class="code" href="structHashEntry.html">HashEntry</a>(<span class="keywordtype">unsigned</span>* keyi)
00041   {
00042     <span class="keywordtype">int</span> i;
00043     <span class="keywordflow">for</span>(i=0;i&lt;KEYLENGTH; i++)
00044       key[i] = *(keyi+i);
00045     next   = NULL;
00046     pre    = NULL;
00047   }
00048 
<a name="l00049"></a><a class="code" href="structHashEntry.html#a1">00049</a>   <a class="code" href="structHashEntry.html">HashEntry</a>()
00050     {
00051       value  = NULL;
00052       next   = NULL;
00053       pre    = NULL;
00054     }
00055 
<a name="l00056"></a><a class="code" href="structHashEntry.html#a2">00056</a>   ~<a class="code" href="structHashEntry.html">HashEntry</a>(){         <span class="comment">//keep the follower when deleting an object</span>
00057      <span class="keywordflow">if</span>(next)
00058        next-&gt;<a class="code" href="structHashEntry.html#o2">pre</a> = pre;
00059      <span class="keywordflow">if</span>(pre)
00060        pre-&gt;<a class="code" href="structHashEntry.html#o3">next</a> = next;
00061      
00062   }
00063 
00064 };
00065 
00066 
<a name="l00067"></a><a class="code" href="hashtab_8h.html#a0">00067</a> <span class="keyword">typedef</span> <a class="code" href="structHashEntry.html">HashEntry</a>* <a class="code" href="structHashEntry.html">HashEntryPtr</a>;
00068 
00069 
<a name="l00071"></a><a class="code" href="classHashTable.html">00071</a> <span class="keyword">class </span><a class="code" href="classHashTable.html">HashTable</a>
00072 {
00073 
00074   <span class="comment">//friend int hash(unsigned* keyi);</span>
<a name="l00075"></a><a class="code" href="classHashTable.html#n0">00075</a>     <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classElement.html">Element</a>;
00076 
00077   <span class="keyword">protected</span>:
<a name="l00078"></a><a class="code" href="classHashTable.html#p0">00078</a>     <span class="keywordtype">unsigned</span>  MinKey[2];
<a name="l00079"></a><a class="code" href="classHashTable.html#p1">00079</a>     <span class="keywordtype">unsigned</span>  MaxKey[2];
<a name="l00080"></a><a class="code" href="classHashTable.html#p2">00080</a>     <span class="keywordtype">unsigned</span>  Range;
<a name="l00081"></a><a class="code" href="classHashTable.html#p3">00081</a>     <span class="keywordtype">double</span>  doublekeyrange[2];
<a name="l00082"></a><a class="code" href="classHashTable.html#p4">00082</a>     <span class="keywordtype">double</span>  hashconstant;
<a name="l00083"></a><a class="code" href="classHashTable.html#p5">00083</a>     <span class="keywordtype">double</span>  Xrange[2];
<a name="l00084"></a><a class="code" href="classHashTable.html#p6">00084</a>     <span class="keywordtype">double</span>  Yrange[2];
<a name="l00085"></a><a class="code" href="classHashTable.html#p7">00085</a>     <span class="keywordtype">double</span>  invdxrange;
<a name="l00086"></a><a class="code" href="classHashTable.html#p8">00086</a>     <span class="keywordtype">double</span>  invdyrange;
00087 
<a name="l00088"></a><a class="code" href="classHashTable.html#p9">00088</a>     <a class="code" href="hashtab_8h.html#a0">HashEntryPtr</a>* bucket;
<a name="l00089"></a><a class="code" href="classHashTable.html#p10">00089</a>     <span class="keywordtype">int</span>           NBUCKETS;
<a name="l00090"></a><a class="code" href="classHashTable.html#p11">00090</a>     <span class="keywordtype">int</span>           PRIME;
<a name="l00091"></a><a class="code" href="classHashTable.html#p12">00091</a>     <span class="keywordtype">int</span>           ENTRIES;
00092      
00093 
00094     <a class="code" href="hashtab_8h.html#a0">HashEntryPtr</a> addElement(<span class="keywordtype">int</span> entry, <span class="keywordtype">unsigned</span>* key);
00095     <a class="code" href="hashtab_8h.html#a0">HashEntryPtr</a> searchBucket(HashEntryPtr p, <span class="keywordtype">unsigned</span>* key);
00096 
00097   <span class="keyword">public</span>:
00098     <a class="code" href="classElement.html#n0">HashTable</a>(<span class="keywordtype">unsigned</span>*, <span class="keywordtype">unsigned</span>*, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>);
00099     <a class="code" href="classElement.html#n0">HashTable</a>(<span class="keywordtype">double</span> *doublekeyrangein, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <span class="keywordtype">double</span>* XR, <span class="keywordtype">double</span>* YR, <span class="keywordtype">int</span> ifrestart);
00100     ~<a class="code" href="classHashTable.html">HashTable</a>();
00101     
00102     <span class="keywordtype">int</span> hash(<span class="keywordtype">unsigned</span>* key);
00103     <span class="keywordtype">void</span>   add(<span class="keywordtype">unsigned</span>* key, <span class="keywordtype">void</span>* value);
00104     <span class="keywordtype">void</span>*  lookup(<span class="keywordtype">unsigned</span>* key);
00105     <span class="keywordtype">void</span>   remove(<span class="keywordtype">unsigned</span>* key);
00106     <span class="keywordtype">void</span>   remove(<span class="keywordtype">unsigned</span>* key, <span class="keywordtype">int</span> whatflag);  <span class="comment">//for debugging</span>
00107     <span class="keywordtype">void</span>   remove(<span class="keywordtype">unsigned</span>* key, <span class="keywordtype">int</span> whatflag, FILE *fp, <span class="keywordtype">int</span> myid, <span class="keywordtype">int</span> where);  <span class="comment">//for debugging</span>
00108     <span class="keywordtype">void</span>   print_out(<span class="keywordtype">int</span>);
00109     <span class="keywordtype">int</span> get_no_of_buckets();
00110 <span class="comment">//    void   get_element_stiffness(HashTable*);</span>
00111     <a class="code" href="hashtab_8h.html#a0">HashEntryPtr</a>*   getbucketptr();
00112     <span class="keywordtype">void</span>* get_value();
00113 
00114     <span class="keywordtype">double</span>* get_Xrange();
00115     <span class="keywordtype">double</span>* get_Yrange();
00116     <span class="keywordtype">double</span>* get_doublekeyrange();
00117     <span class="keywordtype">double</span>  get_invdxrange();
00118     <span class="keywordtype">double</span>  get_invdyrange();
00119     <span class="keywordtype">unsigned</span>* get_MinKey();
00120     <span class="keywordtype">unsigned</span>* get_MaxKey();
00121     <span class="keywordtype">int</span> get_nbuckets();
00122 
00123     <span class="comment">/*</span>
00124 <span class="comment">    double* getXrange();</span>
00125 <span class="comment">    double* getYrange();</span>
00126 <span class="comment">    */</span>
00127     <span class="keywordtype">int</span> get_no_of_entries();
00128 
00129 };
00130     
<a name="l00131"></a><a class="code" href="classHashTable.html#a15">00131</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classHashTable.html#a15">HashTable::get_doublekeyrange</a>(){<span class="keywordflow">return</span> doublekeyrange;};
00132 
<a name="l00133"></a><a class="code" href="classHashTable.html#a11">00133</a> <span class="keyword">inline</span> <a class="code" href="hashtab_8h.html#a0">HashEntryPtr</a>* <a class="code" href="classHashTable.html#a11">HashTable::getbucketptr</a>(){<span class="keywordflow">return</span> bucket;}
00134 
<a name="l00135"></a><a class="code" href="classHashTable.html#a10">00135</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classHashTable.html#a10">HashTable::get_no_of_buckets</a>(){<span class="keywordflow">return</span> NBUCKETS;};
00136 
<a name="l00137"></a><a class="code" href="classHashTable.html#a16">00137</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classHashTable.html#a16">HashTable::get_invdxrange</a>(){<span class="keywordflow">return</span> invdxrange;};
00138 
<a name="l00139"></a><a class="code" href="classHashTable.html#a17">00139</a> <span class="keyword">inline</span> <span class="keywordtype">double</span> <a class="code" href="classHashTable.html#a17">HashTable::get_invdyrange</a>(){<span class="keywordflow">return</span> invdyrange;};
00140 
<a name="l00141"></a><a class="code" href="classHashTable.html#a13">00141</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classHashTable.html#a13">HashTable::get_Xrange</a>(){<span class="keywordflow">return</span> Xrange;};
00142 
<a name="l00143"></a><a class="code" href="classHashTable.html#a14">00143</a> <span class="keyword">inline</span> <span class="keywordtype">double</span>* <a class="code" href="classHashTable.html#a14">HashTable::get_Yrange</a>(){<span class="keywordflow">return</span> Yrange;};
00144 
<a name="l00145"></a><a class="code" href="classHashTable.html#a18">00145</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classHashTable.html#a18">HashTable::get_MinKey</a>(){<span class="keywordflow">return</span> MinKey;};
00146 
<a name="l00147"></a><a class="code" href="classHashTable.html#a19">00147</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classHashTable.html#a19">HashTable::get_MaxKey</a>(){<span class="keywordflow">return</span> MaxKey;};
00148 
<a name="l00149"></a><a class="code" href="classHashTable.html#a20">00149</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classHashTable.html#a20">HashTable::get_nbuckets</a>(){<span class="keywordflow">return</span> NBUCKETS;};
00150 
<a name="l00151"></a><a class="code" href="classHashTable.html#a3">00151</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classHashTable.html#a3">HashTable::hash</a>(<span class="keywordtype">unsigned</span>* key){ 
00152   <span class="comment">//Keith made this change 20061109; and made hash an inline function</span>
00153   <span class="comment">/* NBUCKETS*2 is NBUCKETS*integer integer is empirical could be 1</span>
00154 <span class="comment">  return (((int) ((key[0]*doublekeyrange[1]+key[1])/</span>
00155 <span class="comment">                  (doublekeyrange[0]*doublekeyrange[1]+doublekeyrange[1])*</span>
00156 <span class="comment">                  NBUCKETS*2+0.5) )%NBUCKETS);</span>
00157 <span class="comment">  */</span>
00158   <span class="keywordflow">return</span>(((int) ((key[0]*<a class="code" href="classHashTable.html#p3">doublekeyrange</a>[1]+key[1])*<a class="code" href="classHashTable.html#p4">hashconstant</a>+0.5))%NBUCKETS);
00159 }  
00160 
00161 
00162 <span class="preprocessor">#endif</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Jul 3 12:45:53 2007 for Titan by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.3.9.1 </small></address>
</body>
</html>
