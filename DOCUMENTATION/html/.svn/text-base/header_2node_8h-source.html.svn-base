<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Titan: node.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.5 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="namespaces.html">Namespace List</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a> | <a class="qindex" href="globals.html">File&nbsp;Members</a></div>
<h1>node.h</h1><a href="header_2node_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre>00001 <span class="comment">/*******************************************************************</span>
00002 <span class="comment"> * Copyright (C) 2003 University at Buffalo</span>
00003 <span class="comment"> *</span>
00004 <span class="comment"> * This software can be redistributed free of charge.  See COPYING</span>
00005 <span class="comment"> * file in the top distribution directory for more details.</span>
00006 <span class="comment"> *</span>
00007 <span class="comment"> * This software is distributed in the hope that it will be useful,</span>
00008 <span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00009 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span>
00010 <span class="comment"> *</span>
00011 <span class="comment"> * Author: </span>
00012 <span class="comment"> * Description: </span>
00013 <span class="comment"> *</span>
00014 <span class="comment"> *******************************************************************</span>
00015 <span class="comment"> * $Id: node.h,v 1.2 2004/05/11 14:32:17 kdalbey Exp $ </span>
00016 <span class="comment"> */</span>
00017 
00018 <span class="preprocessor">#ifndef NODE_H</span>
00019 <span class="preprocessor"></span><span class="preprocessor">#define NODE_H</span>
00020 <span class="preprocessor"></span>
00021 <span class="preprocessor">#include "<a class="code" href="properties_8h.html">properties.h</a>"</span>
00022 <span class="preprocessor">#include "<a class="code" href="constant_8h.html">constant.h</a>"</span>
00023 <span class="preprocessor">#include "<a class="code" href="hashtab_8h.html">hashtab.h</a>"</span>
00024 <span class="preprocessor">#include "<a class="code" href="struct_8h.html">struct.h</a>"</span>
00025 
00026 
<a name="l00027"></a><a class="code" href="classNode.html">00027</a> <span class="keyword">class </span><a class="code" href="classNode.html">Node</a> { 
00028   
<a name="l00029"></a><a class="code" href="classNode.html#n0">00029</a>   <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classElement.html">Element</a>;
00030 
00031   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#n2">Pack_element</a>(<a class="code" href="classElement.html">Element</a>* sendel, <a class="code" href="structElemPack.html">ElemPack</a>** elemptr, <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">int</span>);
00032 
00033   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#n2">Pack_element</a>(<a class="code" href="classElement.html">Element</a>* sendel, <a class="code" href="structElemPack.html">ElemPack</a>* elem, <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">int</span>);
00034 
00035   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#n4">destroy_element</a>(<a class="code" href="classElement.html">Element</a>* r_element, 
00036                     <a class="code" href="classHashTable.html">HashTable</a>* HT_Elem_Ptr, <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr);
00037 
00038   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#n5">create_element</a>(<a class="code" href="structElemPack.html">ElemPack</a>* elem2, <a class="code" href="classHashTable.html">HashTable</a>* HT_Elem_Ptr, 
00039                     <a class="code" href="classHashTable.html">HashTable</a>* HT_Node_Ptr, <span class="keywordtype">double</span>* e_error);
00040   
00041   <span class="keyword">friend</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#n6">unrefine_elements</a>(<a class="code" href="classElement.html">Element</a>**, <a class="code" href="classHashTable.html">HashTable</a>*, <a class="code" href="classHashTable.html">HashTable</a>*);
00042 
00043  <span class="keyword">public</span>:
00044   <a class="code" href="classNode.html#a4">Node</a>(<span class="keywordtype">unsigned</span>* keyi, <span class="keywordtype">double</span>*, <a class="code" href="structMatProps.html">MatProps</a>*);
00045 
00046   <a class="code" href="classNode.html#a4">Node</a>(<span class="keywordtype">unsigned</span>*, <span class="keywordtype">double</span>*, <span class="keywordtype">int</span>, <span class="keywordtype">int</span>, <a class="code" href="structMatProps.html">MatProps</a>*);<span class="comment">/*for refined*/</span>
00047 
00048   <a class="code" href="classNode.html#a4">Node</a>(<span class="keywordtype">unsigned</span>* keyi, <span class="keywordtype">double</span>* coordi, <span class="keywordtype">int</span> inf, 
00049        <span class="keywordtype">int</span> ord, <span class="keywordtype">double</span> elev);
00050 
00051   <a class="code" href="classNode.html#a4">Node</a>(FILE* fp, <a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr); <span class="comment">//for restart</span>
00052 
00053   <a class="code" href="classNode.html#a4">Node</a>();
00054 
00055   <a class="code" href="classNode.html#a5">~Node</a>();
00056 
00057   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a6">save_node</a>(FILE* fp); <span class="comment">//for restart</span>
00058   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a7">putdof</a>(<span class="keywordtype">int</span>,<span class="keywordtype">int</span>);
00059   <span class="keywordtype">int</span>* <a class="code" href="classNode.html#a8">getdof</a>();
00060   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a9">putglnum</a>(<span class="keywordtype">int</span>);
<a name="l00061"></a><a class="code" href="classNode.html#a10">00061</a>   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a10">putsol</a>(<span class="keywordtype">double</span>* s){<a class="code" href="classNode.html#p9">sol</a> = s;}
00062   <span class="keywordtype">int</span>  <a class="code" href="classNode.html#a11">getglnum</a>();
<a name="l00063"></a><a class="code" href="classNode.html#a12">00063</a>   <span class="keywordtype">int</span>  <a class="code" href="classNode.html#a12">getinfo</a>() {<span class="keywordflow">return</span> <a class="code" href="classNode.html#p1">info</a>;}
00064   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a13">putinfo</a>(<span class="keywordtype">int</span> in);
00065   <span class="keywordtype">unsigned</span>* <a class="code" href="classNode.html#a14">pass_key</a>();
<a name="l00066"></a><a class="code" href="classNode.html#a15">00066</a>   <span class="keywordtype">double</span>* <a class="code" href="classNode.html#a15">get_coord</a>() {<span class="keywordflow">return</span> <a class="code" href="classNode.html#p3">coord</a>;};
<a name="l00067"></a><a class="code" href="classNode.html#a16">00067</a>   <span class="keywordtype">double</span>* <a class="code" href="classNode.html#a16">getsol</a>(){<span class="keywordflow">return</span> <a class="code" href="classNode.html#p9">sol</a>;}
00068   <span class="keywordtype">int</span>  <a class="code" href="classNode.html#a17">get_order</a>();
00069   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a18">put_order</a>(<span class="keywordtype">int</span>);
00070   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a19">increase_order</a>();
00071   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a20">set_parameters</a>(<span class="keywordtype">int</span> inf, <span class="keywordtype">int</span> ord);
00072   <span class="keywordtype">int</span>  <a class="code" href="classNode.html#a21">get_reconstructed</a>();
00073   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a22">put_reconstructed</a>(<span class="keywordtype">int</span>);
<a name="l00074"></a><a class="code" href="classNode.html#a23">00074</a>   <span class="keywordtype">int</span> <a class="code" href="classNode.html#a23">get_sol_deleted</a>(){<span class="keywordflow">return</span> <a class="code" href="classNode.html#p11">sol_deleted</a>;};
<a name="l00075"></a><a class="code" href="classNode.html#a24">00075</a>   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a24">put_sol_deleted</a>(<span class="keywordtype">int</span> flag){<a class="code" href="classNode.html#p11">sol_deleted</a>=flag;};
<a name="l00076"></a><a class="code" href="classNode.html#a25">00076</a>   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a25">put_id</a>(<span class="keywordtype">int</span> id_in) {<a class="code" href="classNode.html#p0">id</a> = id_in;};
<a name="l00077"></a><a class="code" href="classNode.html#a26">00077</a>   <span class="keywordtype">int</span> <a class="code" href="classNode.html#a26">get_id</a>() {<span class="keywordflow">return</span> <a class="code" href="classNode.html#p0">id</a>;};
00078   <span class="comment">/*  geoflow methods */</span>
<a name="l00079"></a><a class="code" href="classNode.html#a27">00079</a>   <span class="keywordtype">double</span>* <a class="code" href="classNode.html#a27">get_flux</a>() {<span class="keywordflow">return</span> <a class="code" href="classNode.html#p13">flux</a>;};
00080   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a28">zero_flux</a>();
<a name="l00081"></a><a class="code" href="classNode.html#a29">00081</a>   <span class="keywordtype">double</span> <a class="code" href="classNode.html#a29">get_elevation</a>() {<span class="keywordflow">return</span> <a class="code" href="classNode.html#p12">elevation</a>;};
00082   <span class="keywordtype">void</span> <a class="code" href="classNode.html#a30">set_elevation</a>(<a class="code" href="structMatProps.html">MatProps</a>* matprops_ptr);
00083   
00084  <span class="keyword">protected</span>:
<a name="l00085"></a><a class="code" href="classNode.html#p0">00085</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p0">id</a>;<span class="comment">/*--used in delete_unused_nodes_and_elements() function --*/</span>
<a name="l00086"></a><a class="code" href="classNode.html#p1">00086</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p1">info</a>;
<a name="l00087"></a><a class="code" href="classNode.html#p2">00087</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p2">order</a>;
<a name="l00088"></a><a class="code" href="classNode.html#p3">00088</a>   <span class="keywordtype">double</span>    <a class="code" href="classNode.html#p3">coord</a>[<a class="code" href="constant_8h.html#a5">DIMENSION</a>];
00089   <span class="keywordtype">unsigned</span>  <a class="code" href="classNode.html#p4">key</a>[<a class="code" href="constant_8h.html#a0">KEYLENGTH</a>];
<a name="l00090"></a><a class="code" href="classNode.html#p5">00090</a>   <span class="keywordtype">void</span>*     <a class="code" href="classNode.html#p5">nextptr</a>;
<a name="l00091"></a><a class="code" href="classNode.html#p6">00091</a>   <span class="keywordtype">void</span>*     <a class="code" href="classNode.html#p6">preptr</a>;
<a name="l00092"></a><a class="code" href="classNode.html#p7">00092</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p7">dof</a>[2];<span class="comment">/*--dof[1]-dof[0]+1 = dof of the node---*/</span>
<a name="l00093"></a><a class="code" href="classNode.html#p8">00093</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p8">glnum</a>;<span class="comment">/*--the node occupies the position from glnum to glnum+dof--*/</span>
<a name="l00094"></a><a class="code" href="classNode.html#p9">00094</a>   <span class="keywordtype">double</span>*   <a class="code" href="classNode.html#p9">sol</a>;<span class="comment">/*--pointing to an array--*/</span> 
<a name="l00095"></a><a class="code" href="classNode.html#p10">00095</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p10">reconstructed</a>;
<a name="l00096"></a><a class="code" href="classNode.html#p11">00096</a>   <span class="keywordtype">int</span>       <a class="code" href="classNode.html#p11">sol_deleted</a>;
<a name="l00097"></a><a class="code" href="classNode.html#p12">00097</a>   <span class="keywordtype">double</span>    <a class="code" href="classNode.html#p12">elevation</a>; <span class="comment">// this elevation should currently be the GIS elevation at the finest "scale"</span>
00098 
00099   <span class="comment">/* geoflow data */</span>
<a name="l00100"></a><a class="code" href="classNode.html#p13">00100</a>   <span class="keywordtype">double</span> <a class="code" href="classNode.html#p13">flux</a>[<a class="code" href="constant_8h.html#a35">NUM_STATE_VARS</a>]; <span class="comment">//these are the so called "regular fluxes" that is the ones that are used to update the elements, assume that element normal is parallel to either the x or y axis</span>
<a name="l00101"></a><a class="code" href="classNode.html#p14">00101</a>   <span class="keywordtype">double</span> <a class="code" href="classNode.html#p14">refinementflux</a>[<a class="code" href="constant_8h.html#a35">NUM_STATE_VARS</a>]; <span class="comment">//the "refinement flux" is necessary when using the stopping criteria to reset the "regular" fluxes to what they would be if velocity was zero in the cell(s) involved.  The refinement flux is what the flux would have been if it had not been reset, they are needed since refinement is based on fluxes (and also pileheight gradient but that's not relevant here)</span>
00102 };
00103 
00104 
00105 
<a name="l00106"></a><a class="code" href="classNode.html#a7">00106</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#a7">Node:: putdof</a>(<span class="keywordtype">int</span> lower, <span class="keywordtype">int</span> up){
00107      <a class="code" href="classNode.html#p7">dof</a>[0] = lower;
00108      <a class="code" href="classNode.html#p7">dof</a>[1] = up;
00109 }
00110 
<a name="l00111"></a><a class="code" href="classNode.html#a8">00111</a> <span class="keyword">inline</span> <span class="keywordtype">int</span>* <a class="code" href="classNode.html#a8">Node:: getdof</a>(){
00112      <span class="keywordflow">return</span> <a class="code" href="classNode.html#p7">dof</a>;
00113 }
00114 
<a name="l00115"></a><a class="code" href="classNode.html#a9">00115</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#a9">Node:: putglnum</a>(<span class="keywordtype">int</span> numbering){
00116      <a class="code" href="classNode.html#p8">glnum</a> =  numbering;
00117 }
00118 
<a name="l00119"></a><a class="code" href="classNode.html#a11">00119</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classNode.html#a11">Node:: getglnum</a>(){
00120      <span class="keywordflow">return</span> <a class="code" href="classNode.html#p8">glnum</a>;
00121 }
00122 
00123 
<a name="l00124"></a><a class="code" href="classNode.html#a14">00124</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span>* <a class="code" href="classNode.html#a14">Node:: pass_key</a>(){
00125      <span class="keywordflow">return</span> <a class="code" href="classNode.html#p4">key</a>;
00126 }
00127 
<a name="l00128"></a><a class="code" href="classNode.html#a17">00128</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classNode.html#a17">Node:: get_order</a>()
00129 {
00130   <span class="keywordflow">return</span> <a class="code" href="classNode.html#p2">order</a>;
00131 }
00132 
<a name="l00133"></a><a class="code" href="classNode.html#a18">00133</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#a18">Node:: put_order</a>(<span class="keywordtype">int</span> i)
00134 {
00135   <a class="code" href="classNode.html#p2">order</a> = i;
00136 }
00137 
<a name="l00138"></a><a class="code" href="classNode.html#a19">00138</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#a19">Node::increase_order</a>()
00139 {
00140   <a class="code" href="classNode.html#p2">order</a>++;
00141 }
00142 
<a name="l00143"></a><a class="code" href="classNode.html#a22">00143</a> <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classNode.html#a22">Node::put_reconstructed</a>(<span class="keywordtype">int</span> i)
00144 {
00145   <a class="code" href="classNode.html#p10">reconstructed</a> = i;
00146 }
00147 
<a name="l00148"></a><a class="code" href="classNode.html#a21">00148</a> <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classNode.html#a21">Node::get_reconstructed</a>()
00149 {
00150   <span class="keywordflow">return</span> <a class="code" href="classNode.html#p10">reconstructed</a>;
00151 }
00152 
00153 <span class="preprocessor">#endif</span>
00154 <span class="preprocessor"></span>
00155 
00156 
00157 
00158 
00159 
00160 
00161 
00162 
00163 
00164 
00165 
00166 
00167 
00168 
00169 
00170 
00171 
00172 
00173 
00174 
00175 
00176 
00177 
00178 
00179 
00180 
00181 
00182 
00183 
00184 
00185 
00186 
00187 
00188 
00189 
00190 
00191 
00192 
00193 
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Wed Aug 30 17:29:02 2006 for Titan by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.5 </small></address>
</body>
</html>
