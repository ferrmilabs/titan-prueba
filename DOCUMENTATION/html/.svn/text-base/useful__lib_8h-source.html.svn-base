<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>Titan: useful_lib.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.9.1 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="namespaces.html">Namespace List</a> | <a class="qindex" href="hierarchy.html">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.html">Class&nbsp;List</a> | <a class="qindex" href="dirs.html">Directories</a> | <a class="qindex" href="files.html">File&nbsp;List</a> | <a class="qindex" href="functions.html">Class&nbsp;Members</a> | <a class="qindex" href="globals.html">File&nbsp;Members</a></div>
<div class="nav">
<a class="el" href="dir_000000.html">src</a>&nbsp;/&nbsp;<a class="el" href="dir_000011.html">useful</a></div>
<h1>useful_lib.h</h1><a href="useful__lib_8h.html">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment">00001 <span class="comment">//#ifdef __cplusplus </span>
00002 <span class="comment">//extern "C" </span>
00003 <span class="comment">//{</span>
00004 <span class="comment">//#endif</span>
00005 
00006 <span class="comment">/* multi dimensional memmory allocation routines</span>
00007 <span class="comment">   naming conventions</span>
00008 <span class="comment">   CAlloc__() the leading C stands for C style indices (they start from 0 </span>
00009 <span class="comment">      rather than 1... at one point I also had a list of FAlloc__() funtions</span>
00010 <span class="comment">      whose indices started from 1), Alloc stands _ALLOC_ation, the __ is a </span>
00011 <span class="comment">      letter number pair that indicate the type and number of dimensions of </span>
00012 <span class="comment">      the array, specifically...</span>
00013 <span class="comment">      U# = #th dimensional _U_nsigned array</span>
00014 <span class="comment">      I# = #th dimensional _I_nteger array</span>
00015 <span class="comment">      F# = #th dimensional _F_loat array</span>
00016 <span class="comment">      D# = #th dimensional _D_ouble array</span>
00017 <span class="comment">      C# = #th dimensional _C_har array</span>
00018 <span class="comment">   CDeAlloc__() follows the same conventions as CAlloc__(), where DeAlloc</span>
00019 <span class="comment">      stands for _DEALLOC_ation */</span>
00020 <span class="keywordtype">unsigned</span>   *<a class="code" href="useful__lib_8h.html#a2">CAllocU1</a>(<span class="keywordtype">int</span> N1);
00021 <span class="keywordtype">unsigned</span>  **<a class="code" href="useful__lib_8h.html#a3">CAllocU2</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2);
00022 <span class="keywordtype">unsigned</span> ***<a class="code" href="useful__lib_8h.html#a4">CAllocU3</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2, <span class="keywordtype">int</span> N3);
00023 <span class="keywordtype">int</span>        *<a class="code" href="useful__lib_8h.html#a5">CAllocI1</a>(<span class="keywordtype">int</span> N1);
00024 <span class="keywordtype">int</span>       **<a class="code" href="useful__lib_8h.html#a6">CAllocI2</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2);
00025 <span class="keywordtype">int</span>      ***<a class="code" href="useful__lib_8h.html#a7">CAllocI3</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2, <span class="keywordtype">int</span> N3);
00026 <span class="keywordtype">float</span>      *<a class="code" href="useful__lib_8h.html#a8">CAllocF1</a>(<span class="keywordtype">int</span> N1);
00027 <span class="keywordtype">float</span>     **<a class="code" href="useful__lib_8h.html#a9">CAllocF2</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2);
00028 <span class="keywordtype">float</span>    ***<a class="code" href="useful__lib_8h.html#a10">CAllocF3</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2, <span class="keywordtype">int</span> N3);
00029 <span class="keywordtype">double</span>     *<a class="code" href="useful__lib_8h.html#a11">CAllocD1</a>(<span class="keywordtype">int</span> N1);
00030 <span class="keywordtype">double</span>    **<a class="code" href="useful__lib_8h.html#a12">CAllocD2</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2);
00031 <span class="keywordtype">double</span>   ***<a class="code" href="useful__lib_8h.html#a13">CAllocD3</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2, <span class="keywordtype">int</span> N3);
00032 <span class="keywordtype">double</span>  ****<a class="code" href="useful__lib_8h.html#a14">CAllocD4</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2, <span class="keywordtype">int</span> N3, <span class="keywordtype">int</span> N4);
00033 <span class="keywordtype">char</span>       *<a class="code" href="useful__lib_8h.html#a15">CAllocC1</a>(<span class="keywordtype">int</span> N1);
00034 <span class="keywordtype">char</span>      **<a class="code" href="useful__lib_8h.html#a16">CAllocC2</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2);
00035 <span class="keywordtype">char</span>     ***<a class="code" href="useful__lib_8h.html#a17">CAllocC3</a>(<span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> N2, <span class="keywordtype">int</span> N3);
00036 
00037 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a18">CDeAllocU1</a>(<span class="keywordtype">unsigned</span>   *U1);
00038 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a19">CDeAllocU2</a>(<span class="keywordtype">unsigned</span>  **U2);
00039 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a20">CDeAllocU3</a>(<span class="keywordtype">unsigned</span> ***U3);
00040 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a21">CDeAllocI1</a>(<span class="keywordtype">int</span>        *I1);
00041 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a22">CDeAllocI2</a>(<span class="keywordtype">int</span>       **I2);
00042 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a23">CDeAllocI3</a>(<span class="keywordtype">int</span>      ***I3);
00043 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a24">CDeAllocF1</a>(<span class="keywordtype">float</span>      *F1);
00044 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a25">CDeAllocF2</a>(<span class="keywordtype">float</span>     **F2);
00045 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a26">CDeAllocF3</a>(<span class="keywordtype">float</span>    ***F3);
00046 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a27">CDeAllocD1</a>(<span class="keywordtype">double</span>     *D1);
00047 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a28">CDeAllocD2</a>(<span class="keywordtype">double</span>    **D2);
00048 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a29">CDeAllocD3</a>(<span class="keywordtype">double</span>   ***D3);
00049 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a30">CDeAllocD4</a>(<span class="keywordtype">double</span>  ****D4);
00050 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a31">CDeAllocC1</a>(<span class="keywordtype">char</span>       *C1);
00051 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a32">CDeAllocC2</a>(<span class="keywordtype">char</span>      **C2);
00052 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a33">CDeAllocC3</a>(<span class="keywordtype">char</span>     ***C3);
00053 
00054 <span class="comment">//string handeling functions</span>
00055 
00056 <span class="keywordtype">char</span> *<a class="code" href="useful__lib_8h.html#a34">allocstrcpy</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *str);
00057 
00058 
00059 <span class="comment">//input/output to binary binary files</span>
00060 <span class="comment">//fopen_bin also buffers the binary file</span>
00061 FILE *<a class="code" href="useful__lib_8h.html#a35">fopen_bin</a>(<span class="keywordtype">char</span> *filename, <span class="keywordtype">char</span> *mode);
00062 
00063 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a36">freadU</a>(FILE *fp, <span class="keywordtype">unsigned</span> *U);
00064 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a37">freadI</a>(FILE *fp, <span class="keywordtype">int</span>    *I);
00065 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a38">freadF</a>(FILE *fp, <span class="keywordtype">float</span>  *F);
00066 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a39">freadF2D</a>(FILE *fp, <span class="keywordtype">double</span> *D);
00067 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a40">freadD</a>(FILE *fp, <span class="keywordtype">double</span> *D);
00068 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a41">freadC</a>(FILE *fp, <span class="keywordtype">char</span>   *C);
00069 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a42">freadstring</a>(FILE *fp, <span class="keywordtype">char</span> **str);
00070 
00071 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a43">fwriteU</a>(FILE *fp, <span class="keywordtype">unsigned</span> U);
00072 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a44">fwriteI</a>(FILE *fp, <span class="keywordtype">int</span>    I);
00073 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a45">fwriteF</a>(FILE *fp, <span class="keywordtype">float</span>  F);
00074 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a46">fwriteD</a>(FILE *fp, <span class="keywordtype">double</span> D);
00075 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a47">fwriteC</a>(FILE *fp, <span class="keywordtype">char</span>   C);
00076 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a48">fwritestring</a>(FILE *fp, <span class="keywordtype">char</span> *str);
00077 
00078 <span class="comment">//sorting and searching functions</span>
00079 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a49">unique_sort</a>(<span class="keywordtype">int</span> *a, <span class="keywordtype">int</span> *N);
00080 <span class="keywordtype">void</span> <a class="code" href="useful__lib_8h.html#a50">unique_sort_d</a>(<span class="keywordtype">double</span> *a, <span class="keywordtype">int</span> *N);
00081 <span class="keywordtype">int</span> <a class="code" href="useful__lib_8h.html#a51">searchI1</a>(<span class="keywordtype">int</span> *I1, <span class="keywordtype">int</span> N1, <span class="keywordtype">int</span> findme);
00082 <span class="keywordtype">int</span> <a class="code" href="useful__lib_8h.html#a52">searchD1</a>(<span class="keywordtype">double</span> *D1, <span class="keywordtype">int</span> N1, <span class="keywordtype">double</span> findme);
00083 
00084 <span class="comment">//0 to 1 random number generator </span>
00085 <span class="keywordtype">double</span> <a class="code" href="useful__lib_8h.html#a53">ran1</a>(<span class="keywordtype">long</span> *idum);
00086 
00087 <span class="comment">//some unions for changing variable types while preserving the original bits</span>
00088 
00089 
00090 <span class="preprocessor">#ifndef UNIONBYTES</span>
00091 <span class="preprocessor"></span><span class="preprocessor">#define UNIONBYTES</span>
00092 <span class="preprocessor"></span>
<a name="l00093"></a><a class="code" href="unionfourbytes.html">00093</a> <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unionfourbytes.html">fourbytes</a> {
<a name="l00094"></a><a class="code" href="unionfourbytes.html#o0">00094</a>   <span class="keywordtype">char</span> c[4];
<a name="l00095"></a><a class="code" href="unionfourbytes.html#o1">00095</a>   <span class="keywordtype">unsigned</span> u;
<a name="l00096"></a><a class="code" href="unionfourbytes.html#o2">00096</a>   <span class="keywordtype">int</span> i;
<a name="l00097"></a><a class="code" href="unionfourbytes.html#o3">00097</a>   <span class="keywordtype">float</span> f;
00098 } <a class="code" href="unionfourbytes.html">FourBytes</a>; 
00099 
<a name="l00100"></a><a class="code" href="unioneightbytes.html">00100</a> <span class="keyword">typedef</span> <span class="keyword">union </span><a class="code" href="unioneightbytes.html">eightbytes</a> {
<a name="l00101"></a><a class="code" href="unioneightbytes.html#o0">00101</a>   <span class="keywordtype">char</span> c[8];  
<a name="l00102"></a><a class="code" href="unioneightbytes.html#o1">00102</a>   <span class="keywordtype">unsigned</span> u[2];
<a name="l00103"></a><a class="code" href="unioneightbytes.html#o2">00103</a>   <span class="keywordtype">int</span> i[2];
<a name="l00104"></a><a class="code" href="unioneightbytes.html#o3">00104</a>   <span class="keywordtype">float</span> f[2];
<a name="l00105"></a><a class="code" href="unioneightbytes.html#o4">00105</a>   <span class="keywordtype">double</span> d;
00106 } <a class="code" href="unioneightbytes.html">EightBytes</a>; 
00107 
00108 <span class="keywordtype">double</span> <a class="code" href="useful__lib_8h.html#a54">key2double</a>(<span class="keywordtype">unsigned</span> key[2]);
00109 <span class="keywordtype">unsigned</span>* <a class="code" href="useful__lib_8h.html#a55">double2key</a>(<span class="keywordtype">double</span> D, <span class="keywordtype">unsigned</span> key[2]);
00110 
00111 <span class="comment">//miscellaneous</span>
00112 <span class="keywordtype">double</span> <a class="code" href="useful__lib_8h.html#a56">sign</a>(<span class="keywordtype">double</span> a);
00113 
00114 <span class="preprocessor">#endif</span>
00115 <span class="preprocessor"></span>
00116 <span class="comment">//miscellaneous</span>
00117 <span class="comment">/* how isnan() works, when nan is compared to anything 0 is returned</span>
00118 <span class="comment">   any non nan number will either be greater than or equal to or less </span>
00119 <span class="comment">   than zero */</span>
00120 <span class="comment">//static inline int isnan(double x){return(!((x&gt;=0.0)||(x&lt;0.0)));};</span>
00121 <span class="comment">//static inline int isfinite(double x){return(fabs(x)&lt;HUGE_VAL);};</span>
00122 
00123 <span class="comment">//#ifdef __cplusplus</span>
00124 <span class="comment">//}</span>
00125 <span class="comment">//#endif</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Tue Jul 3 12:45:53 2007 for Titan by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.3.9.1 </small></address>
</body>
</html>
