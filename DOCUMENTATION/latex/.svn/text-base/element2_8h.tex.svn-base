\hypertarget{element2_8h}{
\section{element2.h File Reference}
\label{element2_8h}\index{element2.h@{element2.h}}
}
{\tt \#include $<$math.h$>$}\par
{\tt \#include \char`\"{}boundary.h\char`\"{}}\par
{\tt \#include \char`\"{}hashtab.h\char`\"{}}\par
{\tt \#include \char`\"{}node.h\char`\"{}}\par
{\tt \#include \char`\"{}struct.h\char`\"{}}\par
{\tt \#include $<$fstream.h$>$}\par
{\tt \#include $<$iostream.h$>$}\par
\subsection*{Classes}
\begin{CompactItemize}
\item 
class \hyperlink{classElement}{Element}
\begin{CompactList}\small\item\em The Element class is a data structure designed to hold all the information need for an h (cell edge length) p (polynomial order) adaptive finite element. Titan doesn't use p adaptation because it is a finite difference/volume code, hence many of the members are legacy from afeapi (adaptive finite element application programmers interface) which serves as the core of titan. There is a seperate Discontinuous Galerkin Method (finite elements + finite volumes) version of titan and the polynomial information is not legacy there. However in this version of Titan elements function simply as finite volume cells. \item\end{CompactList}\item 
class \hyperlink{classElemPtrList}{Elem\-Ptr\-List}
\begin{CompactList}\small\item\em The Elem\-Ptr\-List class is basically just a \char`\"{}smart array\char`\"{} of pointers to Elements, by smart I mean it keeps track of its size and number of Elements in the list and expands/reallocates itself whenever you add an element ptr to the list when you've run out of space, it also keeps a record of the index of the first \char`\"{}new\char`\"{} element pointer you've added in the current series, which is useful for the intended purpose... Elem\-List was designed for use in refinement and unrefinement to replace fixed sized arrays (length=297200) of pointers to Elements. The reason for this upgrade was it was causing valgrind to issue all kinds of warnings about the \char`\"{}client switching stacks\char`\"{} and \char`\"{}invalid write/read of size blah blah blah\char`\"{} because the stacksize was too large. My 20061121 rewrite of \hyperlink{constant_8h_a21}{hadapt.C} and \hyperlink{constant_8h_a21}{unrefine.C} to make them \char`\"{}fast\char`\"{} caused this problem because I added a second (large) fixed sized array to both of them so I could reduce the number of hashtable scans by only revisiting the \char`\"{}new\char`\"{} additions to the array of pointers of Elements. --Keith wrote this on 20061124, i.e. the day after Thanksgiving, and I'm very thankful for having the inspiration to figure out the cause of valgrid warning. \item\end{CompactList}\end{CompactItemize}
